/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::module;

use gridos::i386::memory::MMU;

use command::CommandLineParser;
use command::CommandLineParserTarget;

use sys::core::String;
use sys::core::anycollection::AnyIterator;
use sys::core::anycollection::AnyList;
use sys::memory::MemoryIOStream;
use sys::runtime::Runtime;
use sys::store::StorageElement;
use sys::stream::IStream;
use sys::stream::OStream;
use sys::stream::SeekableIOStream;

class Module extends StorageElement, CommandLineParserTarget {

    cstring PROPERTYPREFIX_DEFAULT := "meta.";
    cstring PROPERTYNAME_MODULE_ID := "meta.id";
        
    int _pPage;
    int _vPage;
    int _pages;
    int _contentOffset;
    int _contentSize;
    
    [] init(int pPage, int vPage, int pages, int len) {
        _pPage = pPage;
        _vPage = vPage;
        _pages = pages;
        _contentOffset = 0;
        _contentSize = len;
        this._initStorageElement();
    }
    [] __destruct() {
        this._destructStorageElement();
    }
    
    [int] hasId() {
        return this.hasCStringProperty(PROPERTYNAME_MODULE_ID);
    }
    
    [String] getId() {
        return this.getCStringProperty(PROPERTYNAME_MODULE_ID);
    }
    
    [] setId(String id) {
        String tmp = this.createStringFromCString(PROPERTYNAME_MODULE_ID); 
        this.setStringProperty(tmp, id);
        tmp.destroy();
    }

    [SeekableIOStream] getIOStream() {
        MemoryIOStream s = this.rt().createInstance(MemoryIOStream:CLASSNAME);
        s._initBuf(_vPage, _contentSize + _contentOffset);
        return s.iostream();
    }

    [IStream] getContent() {
        MemoryIOStream s = this.rt().createInstance(MemoryIOStream:CLASSNAME);
        s._initBuf(_vPage + _contentOffset, _contentSize);
        return s.istream();
    }
    
    [int] getContentSize() {
        return _contentSize;
    }
    
    [int] isAvailable() {
        return _vPage != 0;
    }
    
    [] mapAt(MMU mmu, int vPage) {
        if (vPage == _vPage) {
            return;
        }
        if (_vPage) {
            mmu.unmapPages(_vPage, _pages);
        }
        _vPage = vPage;
        mmu.mapPages(_pPage, _vPage, _pages);
        mmu.flushTLB();
    }
    
    [] unmap(MMU mmu) {
        if (_vPage) {
            mmu.unmapPages(_vPage, _pages);
            _vPage = 0;
        }
    }
    
    [int] parseCommandline(cstring commandline) {
        Runtime rt = this.rt();
        CommandLineParser p = rt.createInstance(CommandLineParser:CLASSNAME);
        AnyList args = p.split(commandline);
        AnyIterator ai = args.iterator();
        int ret = true;
        if (ai.hasNext()) {
            this.setId(this.createOwnStringFromString(ai.next()));
            ret = p.parse(ai, this.target());
        }
        ai.destroy();
        args.destroyAll();
        args.destroy();
        p.destroy();
        return ret;
    }
    
    [int] pushCLArgument(String arg) {
        this.rt().err().printCString("modules do not support arguments! given: ").print(arg).printNewline();
        return false;
    }
    
    [int] pushCLOption(String opt) {
        this.rt().err().printCString("modules do not support options! given: ").print(opt).printNewline();
        return false;
    }
    
    [int] pushCLValueOption(String opt, String val) {
        String name = this.createStringFromCString(PROPERTYPREFIX_DEFAULT);
        name.print(opt);
        String old = this.setStringProperty(name, this.createOwnStringFromString(val));
        if (old) {
            old.destroy();
        }
        name.destroy();
        return true;
    }
    
    [OStream] dumpToStream(OStream stream, int withProperties) {
        stream.printChar('[').print(this.getId()).printChar(']').printChar(' ')
            .printChar('(').printPtr(_pPage).printChar(':').printPtr(_pPage + _contentOffset + _contentSize).printChar(')')
            .printNewline(); 
        if (withProperties) { this.dumpPropertiesToStream(stream); }
        return stream;
    }    
}
