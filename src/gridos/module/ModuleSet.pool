/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::module;

use gridos::i386::memory::MMU;

use sys::core::String;
use sys::core::anycollection::AnyMap;
use sys::memory::Address;
use sys::memory::PageAllocator;

class ModuleSet extends AnyMap { // HashMap<String, Module>
    
    MMU mmu;
    
    [] _initModuleSet(MMU mmu) {
        this._initAnyMap(5);
        this.mmu = mmu;
    }
    
    [] __destruct() {
        this._destructAnyMap();
    }
    
    [int] hasModule(String moduleId) {
        return this.has(moduleId);
    }
    [Module] getModule(String moduleId) {
        return this.get(moduleId);
    }
    [int] isStringProperty(String moduleId, String property, String value) {
        return this.hasModule(moduleId) && this.getModule(moduleId).isStringProperty(property, value);
    }

    [int] hasCModule(cstring moduleId) {
        String tmp = this.rt().createInstance(String:CLASSNAME);
        tmp.assignCString(moduleId);
        int ret = this.hasModule(tmp);
        tmp.destroy();
        return ret;
    }
    [Module] getCModule(cstring moduleId) {
        String tmp = this.rt().createInstance(String:CLASSNAME);
        tmp.assignCString(moduleId);
        Module ret = this.getModule(tmp);
        tmp.destroy();
        return ret;
    }
    [int] isCStringProperty(cstring moduleId, cstring property, cstring value) {
        return this.hasCModule(moduleId) && this.getCModule(moduleId).isCStringProperty(property, value);
    }
    
    [] addRelocatableModule(cstring commandline, int startAddr, int len) {
        int pages = PageAllocator:bytes2pages(len);
        int allocated = mmu.allocatePagesAt(0xFF800000, pages);
        if (allocated != pages) {
            this.rt().err().printCString("ignore module at ")
                .printPtr(startAddr).printChar(':').printPtr(startAddr + len)
                .printCString(" because of invalid relocation: ")
                .printInt(allocated).printChar('/').printInt(pages)
                .printNewline();
            return;
        }
        mmu.flushTLB();
        Address:copyBytes(startAddr, 0xFF800000, len);
        this._addModule(commandline, mmu.unmapPages(0xFF800000, pages), 0, pages, len);
    }
    
    [] addStaticModule(cstring commandline, int startAddr, int len) {
        if (startAddr % PageAllocator:PAGESIZE) {
            this.rt().err().printCString("ignore static module at ")
                .printPtr(startAddr).printChar(':').printPtr(startAddr + len)
                .printCString(" because of bad page alignment").printNewline();
            return;
        }
        this._addModule(commandline, startAddr, startAddr, PageAllocator:bytes2pages(len), len);
    }
    
    [] _addModule(cstring commandline, int pPage, int vPage, int pages, int len) {
        Module module = this.rt().createInstance(Module:CLASSNAME);
        module.init(pPage, vPage, pages, len);
        
        // TODO: parse header
        if (!module.parseCommandline(commandline)) {
            this.rt().err().printCString("ignore module at ")
                .printPtr(pPage).printChar(':').printPtr(pPage + pages * PageAllocator:PAGESIZE)
                .printCString(" because of invalid commandline").printNewline();
            module.destroy();
            return;
        }
        if (!module.hasId()) {
            this.rt().err().printCString("ignore module at ")
                .printPtr(pPage).printChar(':').printPtr(pPage + pages * PageAllocator:PAGESIZE)
                .printCString(" because of missing module id").printNewline();
            module.destroy();
            return;
        }
        if (this.has(module.getId())) {
            this.rt().err().printCString("ignore module at ")
                .printPtr(pPage).printChar(':').printPtr(pPage + pages * PageAllocator:PAGESIZE)
                .printCString(" because of duplicate module id '").print(module.getId()).printChar('\'').printNewline();
            module.destroy();
            return;
        }
        this.set(module.getId(), module);
    }
    [] destroyModules() {} //freeModules?
}
