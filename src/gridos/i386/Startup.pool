/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386;

use gridos::i386::memory::MMU;
use gridos::i386::memory::MMUPageAllocator;
use gridos::i386::memory::StartupRegistry;

use gridos::module::Module;
use gridos::module::ModuleSet;

use gridos::multiboot2::BootInformation;
use gridos::multiboot2::structs::Context;
use gridos::multiboot2::structs::MultiBootHeader;
use gridos::multiboot2::structs::MultiBootInformation;

use sys::core::anycollection::AnyIterator;
use sys::core::utils::Bitset;
use sys::memory::Address;
use sys::memory::Allocator;
use sys::memory::MemoryInfo;
use sys::memory::MemoryManager;
use sys::memory::PageAllocator;
use sys::memory::PagedMemoryManager;
use sys::runtime::Class;
use sys::runtime::ClassStorage;
use sys::runtime::DynamicListClassStorage;
use sys::runtime::Runtime;
use sys::runtime::RuntimeBuilder;
use sys::runtime::StaticResolvedClassStorage;
use sys::stream::OStream;

class Startup extends Runtime, RuntimeBuilder {
    
    // TODO: implement and collect modules 
    ModuleSet modules;
    [ModuleSet] getModules() { return modules; }
    [] setModules(ModuleSet modules) { this.modules = modules; }
    
    MMU mmu;
    [MMU] getMMU() { return mmu; }
    [] setMMU(MMU mmu) { this.mmu = mmu; }
    
    StartupRegistry startupRegistry;
    [StartupRegistry] getStartupRegistry() { return startupRegistry; }
    [] setStartupRegistry(StartupRegistry startupRegistry) { this.startupRegistry = startupRegistry; }
    
    // methods
    __entry__ [] phase1(int magic, MultiBootInformation mbi, MultiBootHeader mbh) {
        
        // setup context
        Context context = null;
        __pasm__("subl %eax, %esp", {"%eax": Context:SIZEOF}, {"%esp": context});
        context.magic = magic;
        context.mbi = mbi;
        context.mbh = mbh;
        
        Runtime rt = Startup:_bootstrap(Startup:CLASSNAME, 0x3000, context);
        
        // free context
        __pasm__("addl %eax, %esp", {"%eax": Context:SIZEOF});
        
        if (!rt) { return; }
        Startup st = rt.cast(Startup:CLASSNAME, rt);
        if (!st) { return; }
        
        // switch to (virtual) Kernel-Stack
        __pasm__("movl 0xFF800000, %esp");
        // switch to dynamic loaded class and never return
        st.phase2();
    }
    
    [] phase2() {
        startupRegistry.freeUsedPages(mmu);
        startupRegistry.destroy();
        startupRegistry = null;
        this.initializeKernel();
        while (1) { __pasm__("hlt"); }
    }
    
    [Runtime] _buildRuntime(Context context) {
        Runtime bsRt := this.rt();
        CgaScreen bsScreen = bsRt.createInstance(CgaScreen:CLASSNAME);
        bsScreen.init(0xB8000);
        CgaFOStream bsFOut = bsRt.createInstance(CgaFOStream:CLASSNAME);
        bsFOut.setForeground(CgaFOStream:BRIGHT_WHITE);
        OStream bsOut = bsFOut.initOStream(bsScreen);
        
        if (context.magic != BootInformation:BOOTLOADER_MAGIC) {
            bsOut.printCString("Invalid magic number: ").printPtr(context.magic).printNewline();
            return null;
        }
        if (Address:from(context.mbi) % 8) {
            bsOut.printCString("Unaligned mbi: ").printAddr(context.mbi).printNewline();
            return null;
        }
        
        bsRt.setOut(bsOut);
        bsRt.setErr(bsOut);
        Allocator bsAllocator := bsRt.getAllocator();
        ClassStorage bsClassStorage := bsRt.getClassStorage();
        
        BootInformation bi = bsRt.createInstance(BootInformation:CLASSNAME);
        bi.initInfo(context.mbi, context.mbh);
        bsOut.printCString("loaded via ").printCString(bi.getBootLoader()).printNewline();
        
        // collect memory information on stack
        StartupRegistry bsSR = bsRt.createInstance(StartupRegistry:CLASSNAME);
        bsSR.initEmptyFromAllocator(bsAllocator, 1, 100);
        bi.registerMemory(bsSR.mbRegistry());
        
        // enable paging
        MMU bsMMU = bsRt.createInstance(MMU:CLASSNAME);
        bsMMU.activate(bsSR.initializeStartupPageDirectory());
        bsMMU.map(0xB8000, 0xB8000); // remap bsScreen
        
        // initialize kernel heap
        MMUPageAllocator bsMPA = bsRt.createInstance(MMUPageAllocator:CLASSNAME);
        bsMPA._init(bsMMU, 0xF0000000);
        PagedMemoryManager bsPMM = bsRt.createInstance(PagedMemoryManager:CLASSNAME);
        bsPMM.initFromPageAllocator(bsMPA.pageAllocator(), 1);

        // initialize dynamic class storage with copies of static classes
        DynamicListClassStorage bsDLCS = bsRt.createInstance(DynamicListClassStorage:CLASSNAME);
        bsClassStorage.transferClasses(bsDLCS, bsPMM.allocator());
        
        // create "heap"-based runtime
        bsRt.setAllocator(bsPMM.allocator());
        bsRt.setClassStorage(bsDLCS.classStorage());
        Class classClass = bsRt._createClassClass();
        Startup rt = bsRt.createInstance(Startup:CLASSNAME);
        bsRt.setAllocator(bsAllocator);
        bsRt.setClassStorage(bsClassStorage);
        
        rt.setAllocator(bsPMM.allocator());
        rt.setClassStorage(bsDLCS.classStorage());
        rt.setOut(bsOut);
        rt.setErr(bsOut);
        
        rt.refreshInstance(classClass);
        rt.refreshInstance(rt.getClass());
        rt.refreshInstance(rt);
        
        // create "heap"-based MMU
        MMU mmu = rt.createInstance(MMU:CLASSNAME);
        rt.setMMU(mmu);
        
        // create "heap"-based memory management
        PagedMemoryManager pmm = rt.createInstance(PagedMemoryManager:CLASSNAME);
        MMUPageAllocator mpa = rt.createInstance(MMUPageAllocator:CLASSNAME);
        // get top of heap *after* creating instances on heap via bootstrap page allocator
        mpa._init(mmu, bsMPA.getTopOfHeap()); 
        pmm.initFromPagedMemoryManager(mpa.pageAllocator(), bsPMM);
        rt.setAllocator(pmm.allocator());
        
        // create "heap"-based dynamic class storage
        DynamicListClassStorage dlcs = rt.createInstance(DynamicListClassStorage:CLASSNAME);
        bsDLCS.transferClasses(dlcs, null);
        rt.setClassStorage(dlcs.classStorage());
        
        // create "heap"-based stdOut
        mmu.map(0xB8000, 0xFFBFF000);
        CgaScreen screen = rt.createInstance(CgaScreen:CLASSNAME);
        screen.init(0xFFBFF000);
        CgaFOStream out = rt.createInstance(CgaFOStream:CLASSNAME);
        rt.setOut(out.initOStream(screen));
        CgaFOStream err = rt.createInstance(CgaFOStream:CLASSNAME);
        err.setForeground(CgaFOStream:BRIGHT_RED);
        rt.setErr(err.initOStream(screen));
        
        // create "heap"-based module-descriptions
        ModuleSet modules = rt.createInstance(ModuleSet:CLASSNAME);
        modules._initModuleSet(mmu);
        bi.registerModules(modules);
        rt.setModules(modules);
        
        // create "heap"-based startup registry
        StartupRegistry sr = rt.createInstance(StartupRegistry:CLASSNAME);
        bsSR.transferTo(sr);
        rt.setStartupRegistry(sr);
        
        // initialize kernel stack
        int stackPages = 1;
        mmu.allocatePagesAt(0xFF800000 - stackPages*PageAllocator:PAGESIZE, stackPages);
        
        // cleanup
        bsDLCS.destroy();
        bsPMM.destroy();
        bsMPA.destroy();
        bsMMU.destroy();
        bsSR.destroy();
        bi.destroy();
        bsOut.destroy();
        bsScreen.destroy();
        mmu.unmap(0xB8000); // unmap bsScreen
        
        return rt.runtime();
    }
    
    [] initializeKernel() {
        InterruptVectorTable ivt = this.createInstance(InterruptVectorTable:CLASSNAME);
        if (!modules.hasCModule("gidt")) {
            this.err().printCString("Missing static gdt/idt module").printNewline();
            return;
        }
        if (!ivt.initFromModule(modules.getCModule("gidt"), mmu)) {
            return;
        }

        //mmu.map(0x0, 0xFF7FF000);
        
        /* reset coprocessors */        
        IOPort:outb(0xf0, 0); //delay();
        IOPort:outb(0xf1, 0); //delay();
        
        /* activate keyboard and interrupts */
        PIC pic = this.createInstance(PIC:CLASSNAME);
        Keyboard kbd = this.createInstance(Keyboard:CLASSNAME);
        kbd.plugin(pic, ivt);
        ivt.activate();
        
        // TODO: create and initialize kernel runtime
        this.err().printCString("Initialize kernel").printNewline();
        // TODO: run kernel thread and free/destroy startup memory/objects
        this.createAndRunThread(gridos::KernelThread:CLASSNAME);
    }
}
