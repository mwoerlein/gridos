/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386;

use gridos::i386::memory::MMU;
use gridos::i386::memory::MMUPageAllocator;
use gridos::i386::memory::StartupRegistry;

use gridos::multiboot2::BootInformation;
use gridos::multiboot2::structs::Context;
use gridos::multiboot2::structs::MultiBootHeader;
use gridos::multiboot2::structs::MultiBootInformation;

use sys::core::utils::Bitset;
use sys::memory::Address;
use sys::memory::Allocator;
use sys::memory::MemoryInfo;
use sys::memory::MemoryIOStream;
use sys::memory::MemoryManager;
use sys::memory::MemoryRegistry;
use sys::memory::PageAllocator;
use sys::memory::PagedMemoryManager;
use sys::runtime::Runtime;
use sys::runtime::RuntimeBuilder;
use sys::runtime::StaticResolvedClassStorage;
use sys::stream::OStream;

class Startup extends Runtime, RuntimeBuilder {
    
    // TODO: implement and collect modules 
    int modules;
    
    MMU mmu;
    [MMU] getMMU() { return mmu; }
    [] setMMU(MMU mmu) { this.mmu = mmu; }
    
    // methods
    __entry__ [] blub(int magic, MultiBootInformation mbi, MultiBootHeader mbh) {
        
        // setup context
        Context context = null;
        __pasm__("subl %eax, %esp", {"%eax": Context:SIZEOF}, {"%esp": context});
        context.magic = magic;
        context.mbi = mbi;
        context.mbh = mbh;
        
        Runtime _rt = Startup:_bootstrap(Startup:CLASSNAME, 0x3000, context);
        
        // free context
        __pasm__("addl %eax, %esp", {"%eax": Context:SIZEOF});
        
        if (_rt) {
            Startup rt = _rt.cast(Startup:CLASSNAME, _rt);
            if (rt) {
                // TODO: switch to (virtual) Kernel-Stack
                // TODO: switch to dynamic loaded class and never return
                rt.initializeKernel();
            }
        }
        while (1) { __pasm__("hlt"); }
    }
    
    [Runtime] _buildRuntime(Context context) {
        Runtime bsRt := this.rt();
        CgaScreen bsScreen = bsRt.createInstance(CgaScreen:CLASSNAME);
        bsScreen.init(0xB8000);
        OStream bsOut = bsScreen.getFormattedOStream(15);
        
        if (context.magic != BootInformation:BOOTLOADER_MAGIC) {
            bsOut.printCString("Invalid magic number: ").printPtr(context.magic).printNewline();
            return null;
        }
        if (Address:from(context.mbi) % 8) {
            bsOut.printCString("Unaligned mbi: ").printAddr(context.mbi).printNewline();
            return null;
        }
        
        bsRt.setOut(bsOut);
        bsRt.setErr(bsOut);
        Allocator bsAllocator := bsRt.getAllocator();
        
        BootInformation bi = bsRt.createInstance(BootInformation:CLASSNAME);
        bi.initInfo(context.mbi, context.mbh);
        bsOut.printCString("loaded via ").printCString(bi.getBootLoader()).printNewline();
        
        // collect memory information on stack
        StartupRegistry bsSR = bsRt.createInstance(StartupRegistry:CLASSNAME);
        MemoryRegistry bsMR = bsRt.cast(MemoryRegistry:CLASSNAME, bsSR);
        bsMR.initEmptyFromAllocator(bsAllocator, 1, 100);
        bi.registerMemory(bsMR);
        
        // enable paging
        MMU bsMMU = bsRt.createInstance(MMU:CLASSNAME);
        bsMMU._bootstrap(bsSR.extractFreePages());
        // TODO: 
        // - mark mbi-page and kernel/modules as used by Kernel/Startup
        
        // initialize kernel heap
        MMUPageAllocator bsMPA = bsRt.createInstance(MMUPageAllocator:CLASSNAME);
        bsMPA._init(bsMMU, 0xF0000000);
        PagedMemoryManager bsPMM = bsRt.createInstance(PagedMemoryManager:CLASSNAME);
        bsPMM.initFromPageAllocator(bsMPA.pageAllocator(), 1);
        
        // create "heap"-based runtime
        bsRt.setAllocator(bsPMM.allocator());
        Startup rt = bsRt.createInstance(Startup:CLASSNAME);
        bsRt.setAllocator(bsAllocator);
        rt.setRt(rt.runtime());
        rt.setAllocator(bsPMM.allocator());
        rt.setClassStorage(bsRt.getClassStorage());
        
        // create "heap"-based MMU
        MMU mmu = rt.createInstance(MMU:CLASSNAME);
        rt.setMMU(mmu);
        
        // create "heap"-based memory management
        MMUPageAllocator mpa = bsRt.createInstance(MMUPageAllocator:CLASSNAME);
        mpa._init(mmu, bsMPA.getTopOfHeap());
        PagedMemoryManager pmm = bsRt.createInstance(PagedMemoryManager:CLASSNAME);
        pmm.initFromPagedMemoryManager(mpa.pageAllocator(), bsPMM);
        rt.setAllocator(pmm.allocator());
        
        // TODO: initialize DynamicClassStorage with copies of static classes
        // create "heap"-based class storage
        StaticResolvedClassStorage crcs = rt.createInstance(StaticResolvedClassStorage:CLASSNAME);
        rt.setClassStorage(crcs.classStorage());
        crcs.rebuildClasses();
        
        // create "heap"-based stdOut
        mmu.map(0xB8000, 0xFFBFF000);
        CgaScreen screen = rt.createInstance(CgaScreen:CLASSNAME);
        screen.init(0xFFBFF000);
        rt.setOut(screen.getFormattedOStream(7));
        rt.setErr(screen.getFormattedOStream(12));
        
        // TODO: create "heap"-based module-descriptions
        bsRt.setOut(rt.out());
        bsRt.setErr(rt.err());
        bi.registerModules();
        
        // cleanup
        bsPMM.destroy();
        bsMPA.destroy();
        bsMMU.destroy();
        bsSR.destroy();
        bi.destroy();
        bsOut.destroy();
        bsScreen.destroy();
        
        // TODO: free mbi-page
        return rt.runtime();
    }
    
    [] initializeKernel() {
        // TODO: analyse modules
        // - remap/copy GIDT into Kernel-Space and initiate idt/gdt
        // - remap/copy store into Kernel-Space and register at DynamicClassManager
        // - free startup-pages and copied module-pages to free low memory
        mmu.map(0x10000, 0xFFBFD000);
        mmu.map(0x11000, 0xFFBFE000);
        InterruptVectorTable ivt = this.createInstance(InterruptVectorTable:CLASSNAME);
        ivt._init(Address:cast(0xFFBFE000));

        //mmu.map(0x0, 0xFF7FF000);
        
        /* reset coprocessors */        
        IOPort:outb(0xf0, 0); //delay();
        IOPort:outb(0xf1, 0); //delay();
        
        /* activate keyboard and interrupts */
        PIC pic = this.createInstance(PIC:CLASSNAME);
        Keyboard kbd = this.createInstance(Keyboard:CLASSNAME);
        kbd.plugin(pic, ivt);
        ivt.activate();
        
        // TODO: create and initialize kernel runtime
        this.err().printCString("Initialize kernel").printNewline();
        // TODO: run kernel thread and free/destroy startup memory/objects
        this.createAndRunThread(gridos::KernelThread:CLASSNAME);
    }
}
