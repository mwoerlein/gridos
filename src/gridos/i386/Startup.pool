/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386;

use gridos::i386::memory::MMU;
use gridos::i386::memory::MMUPageAllocator;
use gridos::i386::memory::StartupRegistry;
use gridos::i386::process::ProcessManager;
use gridos::i386::process::Scheduler;
use gridos::i386::syscall::Handler as SysCallHandler;

use gridos::module::Module;
use gridos::module::ModuleSet;

use gridos::multiboot2::BootInformation;
use gridos::multiboot2::structs::Context;
use gridos::multiboot2::structs::MultiBootHeader;
use gridos::multiboot2::structs::MultiBootInformation;

use sys::core::anycollection::AnyIterator;
use sys::core::utils::Bitset;
use sys::memory::Address;
use sys::memory::Allocator;
use sys::memory::MemoryInfo;
use sys::memory::MemoryManager;
use sys::memory::PageAllocator;
use sys::memory::PagedMemoryManager;
use sys::runtime::Class;
use sys::runtime::ClassStorage;
use sys::runtime::DynamicClassStorage;
use sys::runtime::Runtime as SysRuntime;
use sys::runtime::RuntimeBuilder;
use sys::runtime::StaticResolvedClassStorage;
use sys::stream::FOStream;
use sys::stream::OStream;
use sys::tui::WindowManager;
use sys::tui::Screen;

class Startup extends Runtime, RuntimeBuilder {
    
    // TODO: implement and collect modules 
    ModuleSet modules;
    [ModuleSet] getModules() { return modules; }
    [] setModules(ModuleSet modules) { this.modules = modules; }
    
    StartupRegistry startupRegistry;
    [StartupRegistry] getStartupRegistry() { return startupRegistry; }
    [] setStartupRegistry(StartupRegistry startupRegistry) { this.startupRegistry = startupRegistry; }
    
    // methods
    __entry__ [] phase1(int magic, MultiBootInformation mbi, MultiBootHeader mbh) {
        
        // setup context
        Context context = null;
        __pasm__("subl %eax, %esp", {"%eax": Context:SIZEOF}, {"%esp": context});
        context.magic = magic;
        context.mbi = mbi;
        context.mbh = mbh;
        
        SysRuntime rt = Startup:_bootstrap(Startup:CLASSNAME, 0x3000, context);
        
        // free context
        __pasm__("addl %eax, %esp", {"%eax": Context:SIZEOF});
        
        if (!rt) { return; }
        Startup st = rt.cast(Startup:CLASSNAME, rt);
        if (!st) { return; }
        
        // switch to (virtual) Kernel-Global-Stack
        __pasm__("movl %eax, %esp", {"%eax": MMU:AFTER_KERNEL_LOCAL_STACKS}, {});
        // switch to dynamic loaded class and never return
        st.phase2();
    }
    
    [] phase2() {
        startupRegistry.freeUsedPages(mmu);
        startupRegistry.destroy();
        startupRegistry = null;
        this.initializeKernel();
        while (1) { __pasm__("hlt"); }
    }
    
    [SysRuntime] _buildRuntime(Context context) {
        SysRuntime bsRt := this.rt();
        CgaScreen bsScreen = bsRt.createInstance(CgaScreen:CLASSNAME);
        bsScreen.init(0xB8000);
        OStream bsOut = bsScreen.createOStream(FOStream:BRIGHT_WHITE, FOStream:DEFAULT);
        
        if (context.magic != BootInformation:BOOTLOADER_MAGIC) {
            bsOut.printCString("Invalid magic number: ").printPtr(context.magic).printNewline();
            return null;
        }
        if (Address:from(context.mbi) % 8) {
            bsOut.printCString("Unaligned mbi: ").printAddr(context.mbi).printNewline();
            return null;
        }
        
        bsRt.setOut(bsOut);
        bsRt.setErr(bsOut);
        Allocator bsAllocator := bsRt.getAllocator();
        ClassStorage bsClassStorage := bsRt.getClassStorage();
        
        BootInformation bi = bsRt.createInstance(BootInformation:CLASSNAME);
        bi.initInfo(context.mbi, context.mbh);
        bsOut.printCString("loaded via ").printCString(bi.getBootLoader()).printNewline();
        
        // collect memory information on stack
        StartupRegistry bsSR = bsRt.createInstance(StartupRegistry:CLASSNAME);
        bsSR.initEmptyFromAllocator(bsAllocator, 1, 100);
        bi.registerMemory(bsSR.mbRegistry());
        
        // enable paging
        MMU bsMMU = bsRt.createInstance(MMU:CLASSNAME);
        bsMMU.activate(bsSR.initializeStartupPageDirectory());
        bsMMU.map(0xB8000, 0xB8000); // remap bsScreen
        
        // initialize kernel heap
        MMUPageAllocator bsMPA = bsRt.createInstance(MMUPageAllocator:CLASSNAME);
        bsMPA._init(bsMMU, MMU:START_KERNEL_SHARED_HEAP);
        PagedMemoryManager bsPMM = bsRt.createInstance(PagedMemoryManager:CLASSNAME);
        bsPMM.setMinimalPageAllocation(16).initFromPageAllocator(bsMPA.pageAllocator(), 1);

        // initialize dynamic class storage with copies of static classes
        DynamicClassStorage bsDCS = bsRt.createInstance(DynamicClassStorage:CLASSNAME);
        bsClassStorage.transferClasses(bsDCS, bsPMM.allocator());
        
        // create "heap"-based runtime
        bsRt.setAllocator(bsPMM.allocator());
        bsRt.setClassStorage(bsDCS.classStorage());
        Class classClass = bsRt._createClassClass();
        Startup rt = bsRt.createInstance(Startup:CLASSNAME);
        bsRt.setAllocator(bsAllocator);
        bsRt.setClassStorage(bsClassStorage);
        
        rt.setAllocator(bsPMM.allocator());
        rt.setPageAllocator(bsMPA.pageAllocator());
        rt.setClassStorage(bsDCS.classStorage());
        rt.setOut(bsOut);
        rt.setErr(bsOut);
        
        rt.refreshInstance(classClass);
        rt.refreshInstance(rt.getClass());
        rt.refreshInstance(rt);
        
        // create "heap"-based MMU
        MMU mmu = rt.createInstance(MMU:CLASSNAME);
        rt.setMMU(mmu);
        
        // create "heap"-based memory management
        PagedMemoryManager pmm = rt.createInstance(PagedMemoryManager:CLASSNAME);
        MMUPageAllocator mpa = rt.createInstance(MMUPageAllocator:CLASSNAME);
        // get top of heap *after* creating instances on heap via bootstrap page allocator
        mpa._init(mmu, bsMPA.getTopOfHeap()); 
        pmm.initFromPagedMemoryManager(mpa.pageAllocator(), bsPMM);
        rt.setAllocator(pmm.allocator());
        rt.setPageAllocator(mpa.pageAllocator());
        
        // create "heap"-based dynamic class storage
        DynamicClassStorage dcs = rt.createInstance(DynamicClassStorage:CLASSNAME);
        bsDCS.transferClasses(dcs, null);
        rt.setClassStorage(dcs.classStorage());
        
        // create "heap"-based stdOut
        CgaScreen screen = rt.createInstance(CgaScreen:CLASSNAME);
        mmu.mapPages(0xB8000, 0xFFBE8000, 8);
        screen.init(0xFFBE8000);
        rt.setOut(screen.createOStream(FOStream:DEFAULT, FOStream:DEFAULT));
        rt.setErr(screen.createOStream(FOStream:BRIGHT_RED, FOStream:DEFAULT));
        rt.setScreen(screen);
        
        // create "heap"-based module-descriptions
        ModuleSet modules = rt.createInstance(ModuleSet:CLASSNAME);
        modules._initModuleSet(mmu);
        bi.registerModules(modules);
        rt.setModules(modules);
        
        // create "heap"-based startup registry
        StartupRegistry sr = rt.createInstance(StartupRegistry:CLASSNAME);
        bsSR.transferTo(sr);
        rt.setStartupRegistry(sr);
        
        // initialize kernel stack (placed for init-thread)
        mmu.allocateStackPagesAt(MMU:AFTER_KERNEL_LOCAL_STACKS, 1);
        
        // cleanup
        bsDCS.destroy();
        bsPMM.destroy();
        bsMPA.destroy();
        bsMMU.destroy();
        bsSR.destroy();
        bi.destroy();
        bsScreen.destroy();
        mmu.unmap(0xB8000); // unmap bsScreen
        
        return rt.runtime();
    }
    
    [] initializeKernel() {
        if (!modules.hasCModule("gidt")) {
            this.err().printCString("Missing static gdt/idt module").printNewline();
            return;
        }
        GlobalDescriptorTable gdt = this.createInstance(GlobalDescriptorTable:CLASSNAME);
        gdt._init(1);
        InterruptVectorTable ivt = this.createInstance(InterruptVectorTable:CLASSNAME);
        if (!ivt.initFromModule(modules.getCModule("gidt"), mmu)) {
            return;
        }
        if (modules.hasCModule("store")) {
            DynamicClassStorage dcs = this.cast(DynamicClassStorage:CLASSNAME, this.getClassStorage());
            sys::store::Store store = dcs.createOwn(sys::store::Store:CLASSNAME);
            Module storeModule = modules.getCModule("store");
            if (!storeModule.isAvailable()) {
                storeModule.mapAt(mmu, MMU:MODULES_MAPPING); // where to map permanently?
            }
            store.setContent(storeModule.getIOStream());
            dcs.addLoader(store.classDescriptorLoader());
        }
        
        /* reset coprocessors */        
        IOPort:outb(0xf0, 0); //delay();
        IOPort:outb(0xf1, 0); //delay();

        /* setup screen */
        CgaScreen screen = this.getScreen();
        //screen.to80x25();
        //screen.to80x50();
        screen.to90x60();
        screen.clear(FOStream:DEFAULT, FOStream:DEFAULT);
        
        /* init kernel thread/process */
        Scheduler scheduler = this.createInstance(Scheduler:CLASSNAME);
        this.setScheduler(scheduler.setMMU(mmu));
        ProcessManager pm = this.createInstance(ProcessManager:CLASSNAME);
        this.setProcessManager(pm.init(scheduler, mmu, gdt));
        
        /* activate keyboard and interrupts */
        PIC pic = this.createInstance(PIC:CLASSNAME);
        Keyboard kbd = this.createInstance(Keyboard:CLASSNAME);
        kbd.plugin(pic, ivt);
        PIT pit = this.createInstance(PIT:CLASSNAME);
        pit.plugin(pic, ivt);
        
        SysCallHandler syscall = this.createInstance(SysCallHandler:CLASSNAME);
        syscall.plugin(ivt);
        
        // prepare isr-stack
        {
            // TODO #28: prepare stacks for each cpu
            int isrStack = MMU:AFTER_KERNEL_SHARED_STACK;
            mmu.allocateStackPagesAt(isrStack, 64);
            gdt.setISRStack(0, isrStack);
        }
        /* setup gdt/tss/ivt */
        gdt.activate().activateTSS(0);
        ivt.activate();
        
        /*
        {
            sys::memory::MemoryInfo ks = getAllocator().allocate(0x1000);
            out.printChar('?').printNewline();
            gdt.setKernelStack(0, ks.buf+0xF00);
            gdt.toUserMode();
            out.printChar('!').printNewline();
            while (1) { __pasm__("hlt"); } // sollte in einen GP(0) laufen
        }
        //*/
        
        /* activate runtime clock */
        TickClock clock := this.createInstance(TickClock:CLASSNAME);
        pit.registerHandler(clock.handler());
        this.setClock(clock.clock());
        scheduler.setClock(clock.clock());
        
        {
            DebugTickHandler dth = this.createInstance(DebugTickHandler:CLASSNAME);
            pit.registerHandler(dth.init(screen, screen.getMaxX()-1, screen.getMaxY()-1).handler());
        }
        
        // TODO: create and initialize kernel runtime
        this.err().printCString("Initialize kernel").printNewline();
        
        WindowManager wm = this.createOwn(WindowManager:CLASSNAME);
        [Screen vs1, Screen vs2, Screen vs3] = wm._init(screen.screen()).split3Tiled();
        
        vs1.clear(FOStream:BRIGHT_YELLOW, FOStream:BLUE);
        vs2.clear(FOStream:BLACK, FOStream:WHITE);
        vs3.clear(FOStream:DEFAULT, FOStream:DEFAULT);
        
        this.setOut(vs3.createOStream(FOStream:DEFAULT, FOStream:DEFAULT));
        this.setErr(vs3.createOStream(FOStream:BRIGHT_RED, FOStream:DEFAULT));
        
        // TODO: run kernel thread and free/destroy startup memory/objects
        if (modules.hasCModule("startup")) {
            sys::core::String taskClassname = modules.getCModule("startup").getCStringProperty("meta.runTask");
            if (taskClassname) {
                pm.createProcess(
                    taskClassname.toCString(),
                    vs1.createOStream(FOStream:BRIGHT_YELLOW, FOStream:BLUE),
                    vs1.createOStream(FOStream:BRIGHT_RED, FOStream:BLUE)
                );
                pm.createProcess(
                    taskClassname.toCString(),
                    vs2.createOStream(FOStream:BLACK, FOStream:WHITE),
                    vs2.createOStream(FOStream:BRIGHT_RED, FOStream:WHITE)
                );
                while (1) {
                    this.yield();
                    clock.sleep(5, 0);
                }
            }
        }
    }
}
