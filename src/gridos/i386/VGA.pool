/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386;

use sys::core::utils::Bitset;
use sys::memory::Address;

class VGA {

    global [] to80x25Text() {
        int i = 0;
        // MISC
        _misc(0x67);
        // SEQ
        _seq(0, 0x03); _seq(1, 0x00); _seq(2, 0x03); _seq(3, 0x00); _seq(4, 0x02);
        // CRTC
        _unlockCrtc();
        i = 0;
        _crtc(i++, 0x5F); _crtc(i++, 0x4F); _crtc(i++, 0x50); _crtc(i++, 0x82);
        _crtc(i++, 0x55); _crtc(i++, 0x81); _crtc(i++, 0xBF); _crtc(i++, 0x1F);
        _crtc(i++, 0x00); _crtc(i++, 0x4F); _crtc(i++, 0x0D); _crtc(i++, 0x0E);
        _crtc(i++, 0x00); _crtc(i++, 0x00); _crtc(i++, 0x00); _crtc(i++, 0x50);
        _crtc(i++, 0x9C); _crtc(i++, 0x0E); _crtc(i++, 0x8F); _crtc(i++, 0x28);
        _crtc(i++, 0x1F); _crtc(i++, 0x96); _crtc(i++, 0xB9); _crtc(i++, 0xA3);
        _crtc(i++, 0xFF);
        // GC
        i = 0;
        _gc(i++, 0x00); _gc(i++, 0x00); _gc(i++, 0x00); _gc(i++, 0x00);
        _gc(i++, 0x00); _gc(i++, 0x10); _gc(i++, 0x0E); _gc(i++, 0x00);
        _gc(i++, 0xFF);
        // AC
        i = 0;
        _ac(i++, 0x00); _ac(i++, 0x01); _ac(i++, 0x02); _ac(i++, 0x03);
        _ac(i++, 0x04); _ac(i++, 0x05); _ac(i++, 0x14); _ac(i++, 0x07);
        _ac(i++, 0x38); _ac(i++, 0x39); _ac(i++, 0x3A); _ac(i++, 0x3B);
        _ac(i++, 0x3C); _ac(i++, 0x3D); _ac(i++, 0x3E); _ac(i++, 0x3F);
        _ac(i++, 0x0C); _ac(i++, 0x00); _ac(i++, 0x0F); _ac(i++, 0x08);
        _ac(i++, 0x00);
        // lock 16-color palette and unblank display
        _lockPalette();
    }
    
    global [] to80x50Text() {
        int i = 0;
        // MISC
        _misc(0x67);
        // SEQ
        _seq(0, 0x03); _seq(1, 0x00); _seq(2, 0x03); _seq(3, 0x00); _seq(4, 0x02);
        // CRTC
        _unlockCrtc();
        i = 0;
        _crtc(i++, 0x5F); _crtc(i++, 0x4F); _crtc(i++, 0x50); _crtc(i++, 0x82);
        _crtc(i++, 0x55); _crtc(i++, 0x81); _crtc(i++, 0xBF); _crtc(i++, 0x1F);
        _crtc(i++, 0x00); _crtc(i++, 0x47); _crtc(i++, 0x06); _crtc(i++, 0x07);
        _crtc(i++, 0x00); _crtc(i++, 0x00); _crtc(i++, 0x01); _crtc(i++, 0x40);
        _crtc(i++, 0x9C); _crtc(i++, 0x8E); _crtc(i++, 0x8F); _crtc(i++, 0x28);
        _crtc(i++, 0x1F); _crtc(i++, 0x96); _crtc(i++, 0xB9); _crtc(i++, 0xA3);
        _crtc(i++, 0xFF);
        // GC
        i = 0;
        _gc(i++, 0x00); _gc(i++, 0x00); _gc(i++, 0x00); _gc(i++, 0x00);
        _gc(i++, 0x00); _gc(i++, 0x10); _gc(i++, 0x0E); _gc(i++, 0x00);
        _gc(i++, 0xFF);
        // AC
        i = 0;
        _ac(i++, 0x00); _ac(i++, 0x01); _ac(i++, 0x02); _ac(i++, 0x03);
        _ac(i++, 0x04); _ac(i++, 0x05); _ac(i++, 0x14); _ac(i++, 0x07);
        _ac(i++, 0x38); _ac(i++, 0x39); _ac(i++, 0x3A); _ac(i++, 0x3B);
        _ac(i++, 0x3C); _ac(i++, 0x3D); _ac(i++, 0x3E); _ac(i++, 0x3F);
        _ac(i++, 0x0C); _ac(i++, 0x00); _ac(i++, 0x0F); _ac(i++, 0x08);
        _ac(i++, 0x00);
        // lock 16-color palette and unblank display
        _lockPalette();
    }
    
    global [] to90x60Text() {
        int i = 0;
        // MISC
        _misc(0xE7);
        // SEQ
        _seq(0, 0x03); _seq(1, 0x01); _seq(2, 0x03); _seq(3, 0x00); _seq(4, 0x02);
        // CRTC
        _unlockCrtc();
        i = 0;
        _crtc(i++, 0x6B); _crtc(i++, 0x59); _crtc(i++, 0x5A); _crtc(i++, 0x82);
        _crtc(i++, 0x60); _crtc(i++, 0x8D); _crtc(i++, 0x0B); _crtc(i++, 0x3E);
        _crtc(i++, 0x00); _crtc(i++, 0x47); _crtc(i++, 0x06); _crtc(i++, 0x07);
        _crtc(i++, 0x00); _crtc(i++, 0x00); _crtc(i++, 0x00); _crtc(i++, 0x00);
        _crtc(i++, 0xEA); _crtc(i++, 0x0C); _crtc(i++, 0xDF); _crtc(i++, 0x2D);
        _crtc(i++, 0x08); _crtc(i++, 0xE8); _crtc(i++, 0x05); _crtc(i++, 0xA3);
        _crtc(i++, 0xFF);
        // GC
        i = 0;
        _gc(i++, 0x00); _gc(i++, 0x00); _gc(i++, 0x00); _gc(i++, 0x00);
        _gc(i++, 0x00); _gc(i++, 0x10); _gc(i++, 0x0E); _gc(i++, 0x00);
        _gc(i++, 0xFF);
        // AC
        i = 0;
        _ac(i++, 0x00); _ac(i++, 0x01); _ac(i++, 0x02); _ac(i++, 0x03);
        _ac(i++, 0x04); _ac(i++, 0x05); _ac(i++, 0x14); _ac(i++, 0x07);
        _ac(i++, 0x38); _ac(i++, 0x39); _ac(i++, 0x3A); _ac(i++, 0x3B);
        _ac(i++, 0x3C); _ac(i++, 0x3D); _ac(i++, 0x3E); _ac(i++, 0x3F);
        _ac(i++, 0x0C); _ac(i++, 0x00); _ac(i++, 0x0F); _ac(i++, 0x08);
        _ac(i++, 0x00);
        // lock 16-color palette and unblank display
        _lockPalette();
    }
    
    global [] toFont8(int buf) {
        // save registers
        int seq2 = IOPort:indexedInb(SEQ_INDEX, 2, SEQ_DATA);
        int seq4 = IOPort:indexedInb(SEQ_INDEX, 4, SEQ_DATA);
        int gc4 = IOPort:indexedInb(GC_INDEX, 4, GC_DATA);
        int gc5 = IOPort:indexedInb(GC_INDEX, 5, GC_DATA);
        int gc6 = IOPort:indexedInb(GC_INDEX, 6, GC_DATA);
        
        // turn off even-odd addressing (set flat addressing) assume: chain-4 addressing already off
        IOPort:indexedOutb(SEQ_INDEX, 4, SEQ_DATA, Bitset:set(seq4, 2));
        IOPort:indexedOutb(GC_INDEX, 5, GC_DATA, Bitset:unset(gc5, 4));
        IOPort:indexedOutb(GC_INDEX, 6, GC_DATA, Bitset:unset(gc6, 1));
    
        // set plane 2
        IOPort:indexedOutb(GC_INDEX, 4, GC_DATA, 2);
        IOPort:indexedOutb(SEQ_INDEX, 2, SEQ_DATA, 4);
        
        // write font
        {
            int p = buf - 32;
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E);
            _store8Char(p+=32, 0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E);
            _store8Char(p+=32, 0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00);
            _store8Char(p+=32, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00);
            _store8Char(p+=32, 0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x92, 0x10, 0x7C);
            _store8Char(p+=32, 0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C);
            _store8Char(p+=32, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00);
            _store8Char(p+=32, 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF);
            _store8Char(p+=32, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00);
            _store8Char(p+=32, 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF);
            _store8Char(p+=32, 0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78);
            _store8Char(p+=32, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18);
            _store8Char(p+=32, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0);
            _store8Char(p+=32, 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0);
            _store8Char(p+=32, 0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99);
            _store8Char(p+=32, 0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00);
            _store8Char(p+=32, 0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00);
            _store8Char(p+=32, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18); 
            _store8Char(p+=32, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00); 
            _store8Char(p+=32, 0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00); 
            _store8Char(p+=32, 0x3E, 0x63, 0x38, 0x6C, 0x6C, 0x38, 0x86, 0xFC); 
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00); 
            _store8Char(p+=32, 0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF);
            _store8Char(p+=32, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00);
            _store8Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00);
            _store8Char(p+=32, 0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00);
            _store8Char(p+=32, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00); 
            _store8Char(p+=32, 0x18, 0x7E, 0xC0, 0x7C, 0x06, 0xFC, 0x18, 0x00); 
            _store8Char(p+=32, 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00);
            _store8Char(p+=32, 0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00);
            _store8Char(p+=32, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00); 
            _store8Char(p+=32, 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00);
            _store8Char(p+=32, 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30);
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00);
            _store8Char(p+=32, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00);
            _store8Char(p+=32, 0x7C, 0xCE, 0xDE, 0xF6, 0xE6, 0xC6, 0x7C, 0x00); 
            _store8Char(p+=32, 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00); 
            _store8Char(p+=32, 0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00); 
            _store8Char(p+=32, 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00); 
            _store8Char(p+=32, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00); 
            _store8Char(p+=32, 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00); 
            _store8Char(p+=32, 0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00);
            _store8Char(p+=32, 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00);
            _store8Char(p+=32, 0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00); 
            _store8Char(p+=32, 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00); 
            _store8Char(p+=32, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00); 
            _store8Char(p+=32, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30); 
            _store8Char(p+=32, 0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00);
            _store8Char(p+=32, 0x3C, 0x66, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00); 
            _store8Char(p+=32, 0x7C, 0xC6, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00); 
            _store8Char(p+=32, 0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00); 
            _store8Char(p+=32, 0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00); 
            _store8Char(p+=32, 0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00); 
            _store8Char(p+=32, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00); 
            _store8Char(p+=32, 0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00); 
            _store8Char(p+=32, 0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00);
            _store8Char(p+=32, 0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3A, 0x00); 
            _store8Char(p+=32, 0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00); 
            _store8Char(p+=32, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00); 
            _store8Char(p+=32, 0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00); 
            _store8Char(p+=32, 0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00); 
            _store8Char(p+=32, 0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00); 
            _store8Char(p+=32, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00);
            _store8Char(p+=32, 0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00); 
            _store8Char(p+=32, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00); 
            _store8Char(p+=32, 0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00); 
            _store8Char(p+=32, 0x7C, 0xC6, 0xC6, 0xC6, 0xD6, 0x7C, 0x0E, 0x00); 
            _store8Char(p+=32, 0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00);
            _store8Char(p+=32, 0x7C, 0xC6, 0xE0, 0x78, 0x0E, 0xC6, 0x7C, 0x00); 
            _store8Char(p+=32, 0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00);
            _store8Char(p+=32, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00); 
            _store8Char(p+=32, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00);
            _store8Char(p+=32, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00); 
            _store8Char(p+=32, 0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00); 
            _store8Char(p+=32, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00);
            _store8Char(p+=32, 0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00);
            _store8Char(p+=32, 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00);
            _store8Char(p+=32, 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00);
            _store8Char(p+=32, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00); 
            _store8Char(p+=32, 0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF); 
            _store8Char(p+=32, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00); 
            _store8Char(p+=32, 0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00);
            _store8Char(p+=32, 0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00); 
            _store8Char(p+=32, 0x38, 0x6C, 0x64, 0xF0, 0x60, 0x60, 0xF0, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8); 
            _store8Char(p+=32, 0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00); 
            _store8Char(p+=32, 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00); 
            _store8Char(p+=32, 0x0C, 0x00, 0x1C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78); 
            _store8Char(p+=32, 0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00);
            _store8Char(p+=32, 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xD6, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xB8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0); 
            _store8Char(p+=32, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E); 
            _store8Char(p+=32, 0x00, 0x00, 0xDC, 0x76, 0x62, 0x60, 0xF0, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x7C, 0xC0, 0x70, 0x1C, 0xF8, 0x00);
            _store8Char(p+=32, 0x10, 0x30, 0xFC, 0x30, 0x30, 0x34, 0x18, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xC6, 0xC6, 0xD6, 0xFE, 0x6C, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8); 
            _store8Char(p+=32, 0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00);
            _store8Char(p+=32, 0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00); 
            _store8Char(p+=32, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00); 
            _store8Char(p+=32, 0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00); 
            _store8Char(p+=32, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0x00);
            _store8Char(p+=32, 0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x0C, 0x06, 0x7C); 
            _store8Char(p+=32, 0x00, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00);
            _store8Char(p+=32, 0x1C, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00); 
            _store8Char(p+=32, 0x7E, 0x81, 0x3C, 0x06, 0x3E, 0x66, 0x3B, 0x00);
            _store8Char(p+=32, 0xCC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00); 
            _store8Char(p+=32, 0xE0, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00); 
            _store8Char(p+=32, 0x30, 0x30, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0x78, 0x0C, 0x38);
            _store8Char(p+=32, 0x7E, 0x81, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00);
            _store8Char(p+=32, 0xCC, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00);
            _store8Char(p+=32, 0xE0, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00); 
            _store8Char(p+=32, 0xCC, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00); 
            _store8Char(p+=32, 0x7C, 0x82, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00); 
            _store8Char(p+=32, 0xE0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00); 
            _store8Char(p+=32, 0xC6, 0x10, 0x7C, 0xC6, 0xFE, 0xC6, 0xC6, 0x00); 
            _store8Char(p+=32, 0x30, 0x30, 0x00, 0x78, 0xCC, 0xFC, 0xCC, 0x00); 
            _store8Char(p+=32, 0x1C, 0x00, 0xFC, 0x60, 0x78, 0x60, 0xFC, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x7F, 0x0C, 0x7F, 0xCC, 0x7F, 0x00);
            _store8Char(p+=32, 0x3E, 0x6C, 0xCC, 0xFE, 0xCC, 0xCC, 0xCE, 0x00); 
            _store8Char(p+=32, 0x78, 0x84, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00); 
            _store8Char(p+=32, 0x00, 0xCC, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00); 
            _store8Char(p+=32, 0x00, 0xE0, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00); 
            _store8Char(p+=32, 0x78, 0x84, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00); 
            _store8Char(p+=32, 0x00, 0xE0, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00); 
            _store8Char(p+=32, 0x00, 0xCC, 0x00, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8);
            _store8Char(p+=32, 0xC3, 0x18, 0x3C, 0x66, 0x66, 0x3C, 0x18, 0x00); 
            _store8Char(p+=32, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00); 
            _store8Char(p+=32, 0x18, 0x18, 0x7E, 0xC0, 0xC0, 0x7E, 0x18, 0x18); 
            _store8Char(p+=32, 0x38, 0x6C, 0x64, 0xF0, 0x60, 0xE6, 0xFC, 0x00); 
            _store8Char(p+=32, 0xCC, 0xCC, 0x78, 0x30, 0xFC, 0x30, 0xFC, 0x30); 
            _store8Char(p+=32, 0xF8, 0xCC, 0xCC, 0xFA, 0xC6, 0xCF, 0xC6, 0xC3); 
            _store8Char(p+=32, 0x0E, 0x1B, 0x18, 0x3C, 0x18, 0x18, 0xD8, 0x70); 
            _store8Char(p+=32, 0x1C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00);
            _store8Char(p+=32, 0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00); 
            _store8Char(p+=32, 0x00, 0x1C, 0x00, 0x78, 0xCC, 0xCC, 0x78, 0x00); 
            _store8Char(p+=32, 0x00, 0x1C, 0x00, 0xCC, 0xCC, 0xCC, 0x76, 0x00); 
            _store8Char(p+=32, 0x00, 0xF8, 0x00, 0xB8, 0xCC, 0xCC, 0xCC, 0x00); 
            _store8Char(p+=32, 0xFC, 0x00, 0xCC, 0xEC, 0xFC, 0xDC, 0xCC, 0x00); 
            _store8Char(p+=32, 0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00); 
            _store8Char(p+=32, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00);
            _store8Char(p+=32, 0x18, 0x00, 0x18, 0x18, 0x30, 0x66, 0x3C, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0xFC, 0xC0, 0xC0, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0xFC, 0x0C, 0x0C, 0x00, 0x00); 
            _store8Char(p+=32, 0xC6, 0xCC, 0xD8, 0x36, 0x6B, 0xC2, 0x84, 0x0F); 
            _store8Char(p+=32, 0xC3, 0xC6, 0xCC, 0xDB, 0x37, 0x6D, 0xCF, 0x03);
            _store8Char(p+=32, 0x18, 0x00, 0x18, 0x18, 0x3C, 0x3C, 0x18, 0x00); 
            _store8Char(p+=32, 0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00);
            _store8Char(p+=32, 0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00); 
            _store8Char(p+=32, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88);
            _store8Char(p+=32, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA); 
            _store8Char(p+=32, 0xDB, 0xF6, 0xDB, 0x6F, 0xDB, 0x7E, 0xD7, 0xED); 
            _store8Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store8Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18);
            _store8Char(p+=32, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18);
            _store8Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36);
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18); 
            _store8Char(p+=32, 0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18); 
            _store8Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18); 
            _store8Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18); 
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18);
            _store8Char(p+=32, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18); 
            _store8Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18); 
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18); 
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36); 
            _store8Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36);
            _store8Char(p+=32, 0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18); 
            _store8Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18); 
            _store8Char(p+=32, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF); 
            _store8Char(p+=32, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0);
            _store8Char(p+=32, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F); 
            _store8Char(p+=32, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00); 
            _store8Char(p+=32, 0x00, 0x00, 0x76, 0xDC, 0xC8, 0xDC, 0x76, 0x00);
            _store8Char(p+=32, 0x00, 0x78, 0xCC, 0xF8, 0xCC, 0xF8, 0xC0, 0xC0);
            _store8Char(p+=32, 0x00, 0xFC, 0xCC, 0xC0, 0xC0, 0xC0, 0xC0, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x00);
            _store8Char(p+=32, 0xFC, 0xCC, 0x60, 0x30, 0x60, 0xCC, 0xFC, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0x70, 0x00);
            _store8Char(p+=32, 0x00, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0xC0);
            _store8Char(p+=32, 0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x00);
            _store8Char(p+=32, 0xFC, 0x30, 0x78, 0xCC, 0xCC, 0x78, 0x30, 0xFC);
            _store8Char(p+=32, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x6C, 0x38, 0x00);
            _store8Char(p+=32, 0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x6C, 0xEE, 0x00);
            _store8Char(p+=32, 0x1C, 0x30, 0x18, 0x7C, 0xCC, 0xCC, 0x78, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x7E, 0xDB, 0xDB, 0x7E, 0x00, 0x00);
            _store8Char(p+=32, 0x06, 0x0C, 0x7E, 0xDB, 0xDB, 0x7E, 0x60, 0xC0);
            _store8Char(p+=32, 0x38, 0x60, 0xC0, 0xF8, 0xC0, 0x60, 0x38, 0x00);
            _store8Char(p+=32, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x00);
            _store8Char(p+=32, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00);
            _store8Char(p+=32, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x7E, 0x00);
            _store8Char(p+=32, 0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xFC, 0x00);
            _store8Char(p+=32, 0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xFC, 0x00);
            _store8Char(p+=32, 0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store8Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0x70);
            _store8Char(p+=32, 0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00);
            _store8Char(p+=32, 0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00);
            _store8Char(p+=32, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x0F, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x3C, 0x1C);
            _store8Char(p+=32, 0x58, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x70, 0x98, 0x30, 0x60, 0xF8, 0x00, 0x00, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x3C, 0x3C, 0x3C, 0x3C, 0x00, 0x00);
            _store8Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        }        

        // restore registers
        IOPort:indexedOutb(SEQ_INDEX, 2, SEQ_DATA, seq2);
        IOPort:indexedOutb(SEQ_INDEX, 4, SEQ_DATA, seq4);
        IOPort:indexedOutb(GC_INDEX, 4, GC_DATA, gc4);
        IOPort:indexedOutb(GC_INDEX, 5, GC_DATA, gc5);
        IOPort:indexedOutb(GC_INDEX, 6, GC_DATA, gc6);
    }

    global [] toFont16(int buf) {
        // save registers
        int seq2 = IOPort:indexedInb(SEQ_INDEX, 2, SEQ_DATA);
        int seq4 = IOPort:indexedInb(SEQ_INDEX, 4, SEQ_DATA);
        int gc4 = IOPort:indexedInb(GC_INDEX, 4, GC_DATA);
        int gc5 = IOPort:indexedInb(GC_INDEX, 5, GC_DATA);
        int gc6 = IOPort:indexedInb(GC_INDEX, 6, GC_DATA);
        
        // turn off even-odd addressing (set flat addressing) assume: chain-4 addressing already off
        IOPort:indexedOutb(SEQ_INDEX, 4, SEQ_DATA, Bitset:set(seq4, 2));
        IOPort:indexedOutb(GC_INDEX, 5, GC_DATA, Bitset:unset(gc5, 4));
        IOPort:indexedOutb(GC_INDEX, 6, GC_DATA, Bitset:unset(gc6, 1));
    
        // set plane 2
        IOPort:indexedOutb(GC_INDEX, 4, GC_DATA, 2);
        IOPort:indexedOutb(SEQ_INDEX, 2, SEQ_DATA, 4);
        
        // write font
        {
            int p = buf - 32;
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7E, 0x81, 0xA5, 0x81, 0x81, 0xBD, 0x99, 0x81, 0x81, 0x7E, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7E, 0xFF, 0xDB, 0xFF, 0xFF, 0xC3, 0xE7, 0xFF, 0xFF, 0x7E, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x6C, 0xFE, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0xE7, 0xE7, 0xE7, 0x99, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x7E, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
            _store16Char(p+=32, 0x00, 0x00, 0x1E, 0x0E, 0x1A, 0x32, 0x78, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x30, 0x30, 0x70, 0xF0, 0xE0, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x63, 0x63, 0x67, 0xE7, 0xE6, 0xC0, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x18, 0x18, 0xDB, 0x3C, 0xE7, 0x3C, 0xDB, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFE, 0xF8, 0xF0, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x02, 0x06, 0x0E, 0x1E, 0x3E, 0xFE, 0x3E, 0x1E, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7F, 0xDB, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x7C, 0xC6, 0x60, 0x38, 0x6C, 0xC6, 0xC6, 0x6C, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x7E, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x6C, 0xFE, 0x6C, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x38, 0x7C, 0x7C, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x7C, 0x7C, 0x38, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x66, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x18, 0x18, 0x7C, 0xC6, 0xC2, 0xC0, 0x7C, 0x06, 0x86, 0xC6, 0x7C, 0x18, 0x18, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0xC2, 0xC6, 0x0C, 0x18, 0x30, 0x60, 0xC6, 0x86, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x30, 0x30, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xCE, 0xD6, 0xD6, 0xE6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x18, 0x38, 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7C, 0xC6, 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7C, 0xC6, 0x06, 0x06, 0x3C, 0x06, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x0C, 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x0C, 0x0C, 0x1E, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xFC, 0x0E, 0x06, 0x06, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x38, 0x60, 0xC0, 0xC0, 0xFC, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xFE, 0xC6, 0x06, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x06, 0x06, 0x0C, 0x78, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x0C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xDE, 0xDE, 0xDE, 0xDC, 0xC0, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x66, 0x66, 0xFC, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xFE, 0x66, 0x62, 0x68, 0x78, 0x68, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xDE, 0xC6, 0xC6, 0x66, 0x3A, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0xCC, 0x78, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xE6, 0x66, 0x6C, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xF0, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xDE, 0x7C, 0x0C, 0x0E, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xFC, 0x66, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0x60, 0x38, 0x0C, 0x06, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x10, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xC6, 0xC6, 0x6C, 0x6C, 0x38, 0x38, 0x6C, 0x6C, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xFE, 0xC6, 0x86, 0x0C, 0x18, 0x30, 0x60, 0xC2, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0x70, 0x38, 0x1C, 0x0E, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00);
            _store16Char(p+=32, 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xE0, 0x60, 0x60, 0x78, 0x6C, 0x66, 0x66, 0x66, 0x66, 0xDC, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x1C, 0x0C, 0x0C, 0x3C, 0x6C, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xCC, 0x78, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xE0, 0x60, 0x60, 0x6C, 0x76, 0x66, 0x66, 0x66, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x18, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x06, 0x06, 0x00, 0x0E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xE0, 0x60, 0x60, 0x66, 0x6C, 0x78, 0x78, 0x6C, 0x66, 0xE6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0xD6, 0xD6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0x0C, 0x1E, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDC, 0x76, 0x62, 0x60, 0x60, 0x60, 0xF0, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0x60, 0x38, 0x0C, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x10, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x30, 0x30, 0x36, 0x1C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x38, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0xF8, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xCC, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x0E, 0x18, 0x18, 0x18, 0x70, 0x18, 0x18, 0x18, 0x18, 0x0E, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x70, 0x18, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x18, 0x18, 0x70, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x3C, 0x66, 0xC2, 0xC0, 0xC0, 0xC0, 0xC2, 0x66, 0x3C, 0x0C, 0x06, 0x7C, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xCC, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x0C, 0x18, 0x30, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x10, 0x38, 0x6C, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xCC, 0xCC, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x60, 0x30, 0x18, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x38, 0x6C, 0x38, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x66, 0x60, 0x60, 0x66, 0x3C, 0x0C, 0x06, 0x3C, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xC6, 0xC6, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0xC0, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x66, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x18, 0x3C, 0x66, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x60, 0x30, 0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0xC6, 0xC6, 0x10, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x38, 0x6C, 0x38, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x18, 0x30, 0x60, 0x00, 0xFE, 0x66, 0x60, 0x7C, 0x60, 0x60, 0x66, 0xFE, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x76, 0x36, 0x7E, 0xD8, 0xD8, 0x6E, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x3E, 0x6C, 0xCC, 0xCC, 0xFE, 0xCC, 0xCC, 0xCC, 0xCC, 0xCE, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x10, 0x38, 0x6C, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xC6, 0xC6, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x60, 0x30, 0x18, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x30, 0x78, 0xCC, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x60, 0x30, 0x18, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xC6, 0xC6, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00);
            _store16Char(p+=32, 0x00, 0xC6, 0xC6, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0xC6, 0xC6, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x18, 0x18, 0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x38, 0x6C, 0x64, 0x60, 0xF0, 0x60, 0x60, 0x60, 0x60, 0xE6, 0xFC, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0xF8, 0xCC, 0xCC, 0xF8, 0xC4, 0xCC, 0xDE, 0xCC, 0xCC, 0xCC, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x0E, 0x1B, 0x18, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0x70, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x18, 0x30, 0x60, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x0C, 0x18, 0x30, 0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x18, 0x30, 0x60, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x18, 0x30, 0x60, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x76, 0xDC, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x76, 0xDC, 0x00, 0xC6, 0xE6, 0xF6, 0xFE, 0xDE, 0xCE, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x3C, 0x6C, 0x6C, 0x3E, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x60, 0xC0, 0xC6, 0xC6, 0x7C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30, 0x60, 0xCE, 0x93, 0x06, 0x0C, 0x1F, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0xC0, 0xC0, 0xC2, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xCE, 0x9A, 0x3F, 0x06, 0x0F, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x3C, 0x3C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x66, 0xCC, 0x66, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x66, 0x33, 0x66, 0xCC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44, 0x11, 0x44);
            _store16Char(p+=32, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA);
            _store16Char(p+=32, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77, 0xDD, 0x77);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x06, 0xF6, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF6, 0x06, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0xF7, 0x00, 0xF7, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1F, 0x18, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0xFF, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0xFF, 0x18, 0xFF, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
            _store16Char(p+=32, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0);
            _store16Char(p+=32, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F);
            _store16Char(p+=32, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0xD8, 0xD8, 0xD8, 0xDC, 0x76, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xC6, 0xFC, 0xC6, 0xC6, 0xFC, 0xC0, 0xC0, 0xC0, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0xFE, 0xC6, 0xC6, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFE, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0xFE, 0xC6, 0x60, 0x30, 0x18, 0x30, 0x60, 0xC6, 0xFE, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xD8, 0xD8, 0xD8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x7E, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x6C, 0x6C, 0x6C, 0xEE, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x1E, 0x30, 0x18, 0x0C, 0x3E, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0xDB, 0xDB, 0xDB, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x03, 0x06, 0x7E, 0xCF, 0xDB, 0xF3, 0x7E, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x1C, 0x30, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x30, 0x1C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x30, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x30, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x0E, 0x1B, 0x1B, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18);
            _store16Char(p+=32, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xD8, 0xD8, 0xD8, 0x70, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x7E, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0xDC, 0x00, 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x38, 0x6C, 0x6C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x0F, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0xEC, 0x6C, 0x6C, 0x3C, 0x1C, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0xD8, 0x6C, 0x6C, 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x70, 0x98, 0x30, 0x60, 0xC8, 0xF8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00);
            _store16Char(p+=32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
        }        

        // restore registers
        IOPort:indexedOutb(SEQ_INDEX, 2, SEQ_DATA, seq2);
        IOPort:indexedOutb(SEQ_INDEX, 4, SEQ_DATA, seq4);
        IOPort:indexedOutb(GC_INDEX, 4, GC_DATA, gc4);
        IOPort:indexedOutb(GC_INDEX, 5, GC_DATA, gc5);
        IOPort:indexedOutb(GC_INDEX, 6, GC_DATA, gc6);
    }
    
    // private
    int SEQ_INDEX := 0x3c4;
    int SEQ_DATA := 0x3c5;
    int CRTC_INDEX := 0x3d4;
    int CRTC_DATA := 0x3d5;
    int GC_INDEX := 0x3ce;
    int GC_DATA := 0x3cf;
    int AC_INDEX := 0x3c0;
    int AC_WRITE := 0x3c0;
    int AC_READ := 0x3c1;
    int INSTAT_READ := 0x3da;
    int MISC_WRITE := 0x3c2;
    
    global [] _misc(int c) {
        IOPort:outb(MISC_WRITE, c);
    }
    
    global [] _seq(int idx, int c) {
        IOPort:indexedOutb(SEQ_INDEX, idx, SEQ_DATA, c);
    }
    
    global [] _unlockCrtc() {
        IOPort:outb(CRTC_DATA, Bitset:set(IOPort:indexedInb(CRTC_INDEX, 3, CRTC_DATA), 7));
        IOPort:outb(CRTC_DATA, Bitset:unset(IOPort:indexedInb(CRTC_INDEX, 17, CRTC_DATA), 7));
    }
    
    global [] _crtc(int idx, int c) {
        if (idx == 3) { IOPort:indexedOutb(CRTC_INDEX, idx, CRTC_DATA, Bitset:set(c, 7)); }
        else if (idx == 17) { IOPort:indexedOutb(CRTC_INDEX, idx, CRTC_DATA, Bitset:unset(c, 7)); }
        else { IOPort:indexedOutb(CRTC_INDEX, idx, CRTC_DATA, c); }
    }
    
    global [] _gc(int idx, int c) {
        IOPort:indexedOutb(GC_INDEX, idx, GC_DATA, c);
    }

    global [] _ac(int idx, int c) {
        IOPort:inb(INSTAT_READ);
        IOPort:indexedOutb(AC_INDEX, idx, AC_WRITE, c);
    }
    
    global [] _lockPalette() {
        IOPort:inb(INSTAT_READ);
        IOPort:outb(AC_INDEX, 0x20);
    }

    global [] _store8Char(int p, int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7) {
        Address:storeChar(p + 0, c0);
        Address:storeChar(p + 1, c1);
        Address:storeChar(p + 2, c2);
        Address:storeChar(p + 3, c3);
        Address:storeChar(p + 4, c4);
        Address:storeChar(p + 5, c5);
        Address:storeChar(p + 6, c6);
        Address:storeChar(p + 7, c7);
    }

    global [] _store16Char(int p, int c0, int c1, int c2, int c3, int c4, int c5, int c6, int c7,
                                  int c8, int c9, int c10, int c11, int c12, int c13, int c14, int c15) {
        Address:storeChar(p + 0, c0);
        Address:storeChar(p + 1, c1);
        Address:storeChar(p + 2, c2);
        Address:storeChar(p + 3, c3);
        Address:storeChar(p + 4, c4);
        Address:storeChar(p + 5, c5);
        Address:storeChar(p + 6, c6);
        Address:storeChar(p + 7, c7);

        Address:storeChar(p + 8, c8);
        Address:storeChar(p + 9, c9);
        Address:storeChar(p + 10, c10);
        Address:storeChar(p + 11, c11);
        Address:storeChar(p + 12, c12);
        Address:storeChar(p + 13, c13);
        Address:storeChar(p + 14, c14);
        Address:storeChar(p + 15, c15);
    }
}
