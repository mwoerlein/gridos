/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386::sys;

use sys::memory::Address;
use sys::memory::MemoryInfo;
use sys::memory::PagedMemoryManager;
use sys::runtime::DynamicClassStorage;
use sys::runtime::Runtime;
use sys::runtime::Thread as SysThread;

class SysCall {

    int SC_WRITE_OUT_CHAR           := 0x01;
    int SC_WRITE_ERR_CHAR           := 0x02;
    int SC_ALLOCATE_USER_HEAP_PAGES := 0x03;
    int SC_SLEEP                    := 0x04;
    int SC_GET_TIME                 := 0x05;
    int SC_GET_CURRENT_THREAD       := 0x06;

    global [] writeOutChar(int c) {
        __pasm__("int 50", {"%eax": SysCall:SC_WRITE_OUT_CHAR, "%ebx": c}, {});
    }
    
    global [] writeErrChar(int c) {
        __pasm__("int 50", {"%eax": SysCall:SC_WRITE_ERR_CHAR, "%ebx": c}, {});
    }
    
    global [MemoryInfo] allocateUserHeapPages(int pages) {
        MemoryInfo ret = null;
        __pasm__("int 50", {"%eax": SysCall:SC_ALLOCATE_USER_HEAP_PAGES, "%ebx": pages}, {"%ebx": ret});
        return ret;
    }

    global [] sleep(int sec, int nsec) {
        __pasm__("int 50", {"%eax": SysCall:SC_SLEEP, "%ebx": sec, "%ecx": nsec}, {});
    }
    
    global [int, int] getTime() {
        int sec = 0;
        int nsec = 0;
        __pasm__("int 50", {"%eax": SysCall:SC_GET_TIME}, {"%ebx": sec, "%ecx": nsec});
        return [sec, nsec];
    }
    
    global [SysThread] getCurrentThread() {
        SysThread ret = null;
        __pasm__("int 50", {"%eax": SysCall:SC_GET_CURRENT_THREAD}, {"%ebx": ret});
        return ret;
    }
    
    global [Runtime] createUserRuntime(Runtime kernelRt, PagedMemoryManager tmpUserPMM, DynamicClassStorage tmpUserClassStorage) {
        Thread forceDependencyToThread = null;
        Process forceDependencyToProcess = null;
        
        // bootstrap user runtime for new process
        // create user runtime on user heap with user classes
        Runtime userRt = kernelRt.createSelfcontainedRuntime(Runtime:CLASSNAME, tmpUserPMM.allocator(), tmpUserClassStorage.classStorage());
        
        // rebuild user class storage in user runtime
        DynamicClassStorage dcs = userRt.createInstance(DynamicClassStorage:CLASSNAME);
        tmpUserClassStorage.transferClasses(dcs, null);
        userRt.setClassStorage(dcs.classStorage());
        
        // rebuild user heap management in user runtime
        PageAllocator pa = userRt.createInstance(PageAllocator:CLASSNAME);
        PagedMemoryManager pmm = userRt.createInstance(PagedMemoryManager:CLASSNAME);
        pmm.initFromPagedMemoryManager(pa.pageAllocator(), tmpUserPMM);
        userRt.setAllocator(pmm.allocator());
        
        // create/use syscall instances
        OutStream out = userRt.createInstance(OutStream:CLASSNAME);
        ErrStream err = userRt.createInstance(ErrStream:CLASSNAME);
        Clock clock = userRt.createInstance(Clock:CLASSNAME);
        
        userRt.setOut(out.ostream());
        userRt.setErr(err.ostream());
        userRt.setClock(clock.clock());
        
        return userRt;
    }
        
}
