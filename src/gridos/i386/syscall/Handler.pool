/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386::syscall;

use gridos::i386::InterruptHandler;
use gridos::i386::InterruptVectorTable;
use gridos::i386::StackFrame;
use gridos::i386::process::Scheduler;
use gridos::i386::process::Thread as I386Thread;
use gridos::i386::process::Process as I386Process;
use gridos::i386::Runtime as I386Runtime;
use gridos::i386::sys::SysCall;

use sys::memory::Address;
use sys::memory::MemoryInfo;
use sys::memory::PageAllocator;
use sys::runtime::Thread as SysThread;
use sys::runtime::Runtime;
use sys::stream::OStream;
use sys::time::Timestamp;

class Handler extends InterruptHandler {

    [int] enforceKernelThreadStack() { return true; }
    
    [] plugin(InterruptVectorTable ivt) {
        ivt.insert(InterruptVectorTable:SYSCALL, this.handler());
    }
    
    [I386Process] getCurrentProcess() {
        I386Runtime rt = this.rt().cast(I386Runtime:CLASSNAME, this.rt());
        if (!rt) { return null; }
        Scheduler s = rt.getScheduler();
        if (!s) { return null; }
        return s.getCurrentThread().getKernelProcess();
    }
    
    [StackFrame] call(StackFrame frame) {
        // allow interrupts during system calls
        __pasm__("sti");
        StackFrame ret = this._call(frame);
        __pasm__("cli");
        return ret;
    }
    
    [StackFrame] _call(StackFrame frame) {
        Runtime ksRt = this.rt();
        OStream debug = ksRt.err();
        
        if (frame.eax == SysCall:SC_WRITE_OUT_CHAR) {
            OStream out = debug;
            I386Process p = this.getCurrentProcess();
            if (p) { out = p.getKernelRuntime().out(); }
            out.printChar(frame.ebx);
            return frame;
        }
        
        if (frame.eax == SysCall:SC_WRITE_ERR_CHAR) {
            OStream err = debug;
            I386Process p = this.getCurrentProcess();
            if (p) { err = p.getKernelRuntime().err(); }
            err.printChar(frame.ebx);
            return frame;
        }
        
        if (frame.eax == SysCall:SC_ALLOCATE_USER_HEAP_PAGES) {
            int pages = frame.ebx;
            frame.ebx = MemoryInfo:NONE;
            I386Process p = this.getCurrentProcess();
            if (p) {
                PageAllocator pa = p.getUserPageAllocator();
                if (pa) {
                    MemoryInfo info = pa.allocatePages(pages);
                    frame.ebx = Address:from(info); 
                }
            }
            return frame;
        }
        
        if (frame.eax == SysCall:SC_SLEEP) {
            int sec := frame.ebx;
            int nsec := frame.ecx;
            if (sec == 0 && nsec == 0) {
                ksRt.yield();
            } else {
                ksRt.sleep(sec, nsec);
            }
            return frame;
        }
        
        if (frame.eax == SysCall:SC_GET_TIME) {
            frame.ebx = 0;
            frame.ecx = 0;
            sys::time::Clock clock = ksRt.getClock();
            if (clock) {
                [int s, int n] := clock.getTime();
                frame.ebx = s;
                frame.ecx = n;
            }
            return frame;
        }
        
        if (frame.eax == SysCall:SC_GET_CURRENT_THREAD) {
            SysThread thread = ksRt.getCurrentThread();
            frame.ebx = Address:from(thread);
            return frame;
        }
        
        debug.printCString("unknown SysCall")
            .printCString(" %eax:").printPtr(frame.eax)
            .printCString(" %ebx:").printPtr(frame.ebx)
            .printCString(" %ecx:").printPtr(frame.ecx)
            .printCString(" %edx:").printPtr(frame.edx)
            .printNewline();
        return frame;
    }
}
