/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386;

use gridos::i386::memory::MMU;
use gridos::module::Module;

use sys::core::anycollection::AnyArray;
use sys::core::Object;
use sys::runtime::Runtime;
use sys::stream::OStream;

use sys::memory::Address;

class InterruptVectorTable extends Object {

    int TABLE_SIZE := 256;
    
    int TIMER := 32;
    int KEYBOARD := 33;
    
    AnyArray table;
    IgnoreHandler ignore;
    GIDTDescription gidt;
    
    [int] initFromModule(Module m, MMU mmu) {
        if (!m.hasCStringProperty("meta.target")) {
            this.rt().err().printCString("Invalid static gdt/idt module: missing 'target' property").printNewline();
            m.dumpToStream(this.rt().out(), 1);
            return false;
        }
        
        int t = m.getCStringProperty("meta.target").toInt();
        m.mapAt(mmu, t);
        this._init(Address:cast(t));
        return true;
    }
    
    [] _init(GIDTDescription gidt) {
        Runtime rt = this.rt();
        ignore = rt.createInstance(IgnoreHandler:CLASSNAME);
        table = rt.createInstance(AnyArray:CLASSNAME);
        table.initWith(TABLE_SIZE, ignore.handler());
        this.gidt = gidt;
    }
    
    [] __destruct() {
        table.destroy();
        // destroy all InterruptHandler?
        ignore.destroy();
    }
    
    [int] getSize() { return TABLE_SIZE; }
    
    [] insert(int nr, InterruptHandler hdl) { table.set(nr, hdl); }
    
    [] activate() {
        __pasm__("cli");
        // TODO: deactivate current active idt
        // TODO: register this in runtime as active
        gidt.ivt = this;
        __pasm__(".byte 0x0f; .byte 0x01; .byte 0x18  #//lidtl (%eax)", {"%eax": gidt.idt});
        __pasm__("sti");
    }
    
    [] deactivate() {
        // wait for running interrupts, free memory, ...
    }
    
    [StackFrame] call(StackFrame frame) {
        InterruptHandler ih = table.get(frame.interrupt);
        ih.call(frame.interrupt, frame.error);
        return frame;
    }
    
/*/
    global [] genTable(OStream out) {
        out.printCString(<"
_gridos_i386_interrupt_InterruptVectorTable_m_call := 112
__idt_instance: .long 0
__idt_table:
    .wordt ((__idt_end - __idt_start) - 1)
    .long __idt_start
__idt_isr_common:
    // store all registers in stack frame
    pushad
    pushl %ds
    pushl %es
    pushl %fs
    pushl %gs
    
    // ensure kernel segment in all segment registers
    movw %ss, %ax
    movw %ax, %ds
    movw %ax, %es
    movw %ax, %fs
    movw %ax, %gs
    
    // call interrupt
    movl %esp, %eax
    subl 4, %esp
    pushl %eax
    movl (__idt_instance), %eax
    pushl %eax; pushl _gridos_i386_interrupt_InterruptVectorTable_m_call; call (%eax)
    addl 12, %esp
    // replace stack frame (for context switch)
    popl %esp
    
    // restore all registers from stack frame
    popl %gs
    popl %fs
    popl %es
    popl %ds
    popad
    // remove interrupt number and error code
    addl 8, %esp
    iret
">).printNewline();
        int i = 0;
        while(i < TABLE_SIZE) {
            if (i == 8 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 17 || i == 30) {
                out.printCString("__idt_isr_").printInt(i)
                    .printCString(":          pushl ").printInt(i).printCString("; jmp __idt_isr_common")
                    .printNewline();
            } else {
                out.printCString("__idt_isr_").printInt(i)
                    .printCString(": pushl 0; pushl ").printInt(i).printCString("; jmp __idt_isr_common")
                    .printNewline();
            }
            i++;
        }
        out.printCString("__idt_start:").printNewline();
        i = 0;
        while(i < TABLE_SIZE) {
            out.printCString("  .wordt __idt_isr_").printInt(i)
                .printCString("; .word 0x0008; .word 0x8e00; .wordt (__idt_isr_").printInt(i)
                .printCString(" >> 16)").printNewline();
            i++;
        }
        out.printCString("__idt_end:").printNewline();
    }
//*/    
}
