/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386;

use gridos::i386::memory::MMU;
use gridos::module::Module;

use sys::core::anycollection::AnyArray;
use sys::core::Object;
use sys::memory::Address;
use sys::stream::OStream;

class InterruptVectorTable extends Object {

    int TABLE_SIZE := 256;
    
    int TIMER := 32;
    int KEYBOARD := 33;
    int SYSCALL := 50;
    
    AnyArray table;
    IgnoreHandler ignore;
    GIDTDescription gidt;
    
    [int] initFromModule(Module m, MMU mmu) {
        if (!m.hasCStringProperty("meta.target")) {
            this.rt().err().printCString("Invalid static gdt/idt module: missing 'target' property").printNewline();
            m.dumpToStream(this.rt().out(), 1);
            return false;
        }
        
        int t = m.getCStringProperty("meta.target").toInt();
        m.mapAt(mmu, t);
        this._init(Address:cast(t));
        return true;
    }
    
    [] _init(GIDTDescription gidt) {
        sys::runtime::Runtime rt = this.rt();
        ignore = rt.createInstance(IgnoreHandler:CLASSNAME);
        table = rt.createInstance(AnyArray:CLASSNAME);
        table.initWith(TABLE_SIZE, ignore.handler());
        this.gidt = gidt;
    }
    
    [] __destruct() {
        table.destroy();
        // destroy all InterruptHandler?
        ignore.destroy();
    }
    
    [int] getSize() { return TABLE_SIZE; }
    
    [] insert(int nr, InterruptHandler hdl) { table.set(nr, hdl); }
    
    [] activate() {
        gidt.ivt = this;
        __pasm__("cli");
        // TODO: deactivate current active idt
        // TODO: register this in runtime as active
        __pasm__(".byte 0x0f; .byte 0x01; .byte 0x18  #//lidtl (%eax)", {"%eax": gidt.idt});
        __pasm__("sti");
    }
    
    [] deactivate() {
        // wait for running interrupts, free memory, ...
    }
    
    [StackFrame] call(StackFrame frame) {
        InterruptHandler ih = table.get(frame.interrupt);
        if (ih.enforceKernelThreadStack()) {
            // switch to thread kernel space, if necessary
            int topOfStack = 0;
            __pasm__("movl %esp, %eax",{},{"%eax": topOfStack});
            if (Address:compareAddress(topOfStack, MMU:AFTER_KERNEL_LOCAL_STACKS) > 0) {
                int bytesToCopy = MMU:AFTER_KERNEL_SHARED_STACK - topOfStack;
                // only switches from user space to kernel mode are using the shared kernel stack
                // system calls/interrupts during kernel mode, stays on the same stack
                // therefore everytime we need an explicitly switch, we can start a fresh kernel stack as it is the first entry
                // TODO #30: determine correct stack of current thread
                int topOfThreadStack = MMU:AFTER_KERNEL_LOCAL_STACKS - bytesToCopy;
                int stackOffset = topOfThreadStack - topOfStack;
                // copy shared stack to kernel thread stack, adjust current frame and switch to kernel thread stack
                {
                    Address:copyBytes(topOfStack, topOfThreadStack, bytesToCopy);
                    __pasm__("addl %eax, %esp; addl %eax, 8(%esp); addl %eax, 12(%esp); addl %eax, %ebp",{"%eax": stackOffset},{});
                }
                // adjust pointer to stack
                frame = Address:offset(frame, stackOffset);
                frame._esp += stackOffset;
            }
        }
        return ih.call(frame);
    }
    
/*/
    global [] genTable(OStream out) {
        out.printCString(<"
_gridos_i386_interrupt_InterruptVectorTable_m_call := 160
__idt_instance: .long 0
__idt_table:
    .wordt ((__idt_end - __idt_start) - 1)
    .long __idt_start
__idt_isr_common:
    // store all registers in stack frame
    pushad
    pushl %ds
    pushl %es
    pushl %fs
    pushl %gs
    
    // ensure kernel segment in all segment registers
    movw %ss, %ax
    movw %ax, %ds
    movw %ax, %es
    movw %ax, %fs
    movw %ax, %gs
    
    // call interrupt
    movl %esp, %eax
    subl 4, %esp
    pushl %eax
    movl (__idt_instance), %eax
    pushl %eax; pushl _gridos_i386_interrupt_InterruptVectorTable_m_call; call (%eax)
    addl 12, %esp
    // replace stack frame (for context switch)
    popl %esp
    
    // restore all registers from stack frame
    popl %gs
    popl %fs
    popl %es
    popl %ds
    popad
    // remove interrupt number and error code
    addl 8, %esp
    iret
">).printNewline();
        int i = 0;
        while(i < TABLE_SIZE) {
            if (i == 8 || i == 10 || i == 11 || i == 12 || i == 13 || i == 14 || i == 17 || i == 30) {
                out.printCString("__idt_isr_").printInt(i)
                    .printCString(":          pushl ").printInt(i).printCString("; jmp __idt_isr_common")
                    .printNewline();
            } else {
                out.printCString("__idt_isr_").printInt(i)
                    .printCString(": pushl 0; pushl ").printInt(i).printCString("; jmp __idt_isr_common")
                    .printNewline();
            }
            i++;
        }
        out.printCString("__idt_start:").printNewline();
        i = 0;
        while(i < TABLE_SIZE) {
            out.printCString("  .wordt __idt_isr_").printInt(i)
                .printCString("; .word 0x0008; .word 0x8e00; .wordt (__idt_isr_").printInt(i)
                .printCString(" >> 16)").printNewline();
            i++;
        }
        out.printCString("__idt_end:").printNewline();
    }
//*/    
}
