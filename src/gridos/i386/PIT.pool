/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386;


class PIT extends InterruptHandler {
    
    int FREQUENCY := 3579545; // 3 * 1193181,66666 Hz
   
    PIC pic;
    InterruptVectorTable ivt;
    TickHandler handlers;
    int reloadValue;
    
    [] __init() {
        reloadValue = 1193; // 1000,152 Hz => ~1 Tick per ms
        handlers = null;
    }
    
    [] __destruct() {
        // destroy all TickHandler?
    }
    
    [] plugin(PIC pic, InterruptVectorTable ivt) {
        this.pic = pic;
        this.ivt = ivt;
        ivt.insert(InterruptVectorTable:TIMER, this.handler());
        // program PIT0 to reload interval
        __pasm__("cli");
        IOPort:outb(0x43, 0x34);            // channel 0, lobyte/hibyte, rate generator
        IOPort:outb(0x40, reloadValue);     // set low byte of PIT reload value
        IOPort:outb(0x40, reloadValue/256); // set high byte of PIT reload value
        __pasm__("sti");
        // activate interrupts after correct interval was initiated
        pic.activate(PIC:TIMER);
    }
    
    [] registerHandler(TickHandler h) {
        h.initFrequency(PIT:FREQUENCY, 3*reloadValue);
        handlers = h.setNext(handlers);
    }
    
    [] call(int nr, int errorCode) {
        TickHandler h = handlers;
        while (h) {
            h.call();
            h = h.getNext();
        }
        pic.finalize(PIC:TIMER);
    }
}
