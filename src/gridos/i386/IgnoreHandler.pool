/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386;


class IgnoreHandler extends InterruptHandler {

    [StackFrame] call(StackFrame frame) {
        int nr := frame.interrupt;
        int errorCode := frame.error;
        if (nr < 32) {
            sys::stream::OStream err = this.rt().err();
            err.printCString(this.getName(nr))
                .printCString(" (int ").printInt(nr)
                .printCString(" err ").printInt(errorCode);
            if (nr == 14) {
                int cr2 = 0;
                __pasm__("movl %cr2, %eax",{},{"%eax": cr2});
                err.printCString(" cr2 ").printPtr(cr2);
            }
            err.printCString(") => halting").printNewline();
            while (true) { __pasm__ ("hlt"); }
        }
        this.rt().out()
            .printCString("(int ").printInt(nr)
            .printCString(" err ").printInt(errorCode)
            .printCString(") => ignored").printNewline();
        return frame;
    }
    
    [cstring] getName(int nr) {
        if (nr ==  0) { return "Divide-by-zero"; }                // A
        if (nr ==  1) { return "Debug"; }                         // B
        if (nr ==  2) { return "NMI"; }                           // C
        if (nr ==  3) { return "Breakpoint"; }                    // D
        if (nr ==  4) { return "Overflow"; }                      // E
        if (nr ==  5) { return "Bound Range Exceeded"; }          // F
        if (nr ==  6) { return "Invalid Opcode"; }                // G
        if (nr ==  7) { return "Device Not Available"; }          // H
        if (nr ==  8) { return "Double Fault"; }                  // I
        if (nr ==  9) { return "Coprocessor Segment Overrun"; }   // J
        if (nr == 10) { return "Invalid TSS"; }                   // K
        if (nr == 11) { return "Segment Not Present"; }           // L
        if (nr == 12) { return "Stack-Segment Fault"; }           // M
        if (nr == 13) { return "General Protection Fault"; }      // N
        if (nr == 14) { return "Page Fault"; }                    // O
        if (nr == 16) { return "x87 Floating-Point Exception"; }  // Q
        if (nr == 17) { return "Alignment Check"; }               // R
        if (nr == 18) { return "Machine Check"; }                 // S
        if (nr == 19) { return "SIMD Floating-Point Exception"; } // T
        if (nr == 20) { return "Virtualization Exception"; }      // U
        if (nr == 30) { return "Security Exception"; }            // 
        return "Reserved";
    }
}
