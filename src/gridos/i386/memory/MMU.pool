/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386::memory;

use sys::core::Object;
use sys::core::utils::Bitset;
use sys::memory::Address;
use sys::memory::PageAllocator;

class MMU extends Object {
    int activeDirectory;
    PhysicalFreePageInfo info;
    
    [] __init() {
        int cr0 = 0;
        __pasm__(".byte 0x0F; .byte 0x20; .byte 0xC0 #//movl %cr0, %eax", {}, {"%eax": cr0});
        if (Bitset:has(cr0, 0x80000001)) {
            __pasm__(".byte 0x0F; .byte 0x20; .byte 0xD8 #//movl %cr3, %eax", {}, {"%eax": activeDirectory});
        } else {
            activeDirectory = 0;
        }
        info = Address:cast(0xFFBFB000);
    }
    
    [int] isActive() {
        return this.activeDirectory != 0;
    }

    [] activate(int pageDirectoryPAddr) {
        if (pageDirectoryPAddr == 0) {
            this.rt().err().printCString("invalid page directory to activate");
            this.rt().out().printNewline();
            return;
        }
        __pasm__(<"
             .byte 0x0F; .byte 0x22; .byte 0xD8 #//movl %eax, %cr3 
             .byte 0x0F; .byte 0x20; .byte 0xC0 #//movl %cr0, %eax
             orl 0x80000001, %eax 
             .byte 0x0F; .byte 0x22; .byte 0xC0 #//movl %eax, %cr0
        ">, {"%eax": pageDirectoryPAddr});
        this.activeDirectory = pageDirectoryPAddr;
    }
    
    [] map(int pAddr, int vAddr) {
        int pdIndex = Bitset:rshift(vAddr, 22);
        int ptIndex = Bitset:and(Bitset:rshift(vAddr, 12), 0x3ff);
        int pdEntryAddr = 0xFFFFF000 + 4*pdIndex;
        int ptEntryAddr = 0xFFC00000 + Bitset:lshift(pdIndex, 12) + 4*ptIndex;
        
        int pdEntry = Address:loadAddress(pdEntryAddr);
        if (!Bitset:has(pdEntry, 0x1)) {
            Address:storeAddress(pdEntryAddr, this.newPageTable() + 0x1);
            this.flushTLB();
        }
        Address:storeAddress(ptEntryAddr, Bitset:and(pAddr, 0xfffff000) + 0x1); 
    }
    
    [int] unmap(int vAddr) {
        int pdIndex = Bitset:rshift(vAddr, 22);
        int ptIndex = Bitset:and(Bitset:rshift(vAddr, 12), 0x3ff);
        int pdEntryAddr = 0xFFFFF000 + 4*pdIndex;
        int ptEntryAddr = 0xFFC00000 + Bitset:lshift(pdIndex, 12) + 4*ptIndex;
        
        int pdEntry = Address:loadAddress(pdEntryAddr);
        if (!Bitset:has(pdEntry, 0x1)) {
            return -1;
        }
        int ptEntry = Address:loadAddress(ptEntryAddr);
        if (!Bitset:has(ptEntry, 0x1)) {
            return -1;
        }
        Address:storeAddress(ptEntryAddr, 0); 
        return Bitset:and(ptEntry, 0xfffff000); 
    }
    
    [] mapPages(int pAddr, int vAddr, int pages) {
        int curP = pAddr;
        int curV = vAddr;
        int c = 0;
        while (c++ < pages) {
            this.map(curP, curV);
            curP += PageAllocator:PAGESIZE;
            curV += PageAllocator:PAGESIZE;
        }
    }
    
    [int] unmapPages(int vAddr, int pages) {
        int ret = this.unmap(vAddr);
        int curV = vAddr + PageAllocator:PAGESIZE;
        int c = 1;
        while (c++ < pages) {
            this.unmap(curV);
            curV += PageAllocator:PAGESIZE;
        }
        return ret;
    }
    
    [int] getPPage(int vAddr) {
        int pdIndex = Bitset:rshift(vAddr, 22);
        int ptIndex = Bitset:and(Bitset:rshift(vAddr, 12), 0x3ff);
        int pdEntryAddr = 0xFFFFF000 + 4*pdIndex;
        int ptEntryAddr = 0xFFC00000 + Bitset:lshift(pdIndex, 12) + 4*ptIndex;
        
        int pdEntry = Address:loadAddress(pdEntryAddr);
        if (!Bitset:has(pdEntry, 0x1)) {
            return -1;
        }
        int ptEntry = Address:loadAddress(ptEntryAddr);
        if (!Bitset:has(ptEntry, 0x1)) {
            return -1;
        }
        return Bitset:and(ptEntry, 0xfffff000); 
    }
    
    [] flushTLB() {
        __pasm__(<"
             .byte 0x0F; .byte 0x20; .byte 0xD8 #//movl %cr3, %eax 
             .byte 0x0F; .byte 0x22; .byte 0xD8 #//movl %eax, %cr3
        ">, {}, {"%eax": null}); 
    }
    
    [int] allocatePagesAt(int virtualAddress, int count) {
        int pages = count;
        int allocated = 0;
        if (info.count >= pages) {
            info.count -= pages;
            int pAddr = Address:offsetAddress(info.self, info.count * PageAllocator:PAGESIZE);
            int vAddr = virtualAddress;
            while (pages-- > 0 && (this.getPPage(vAddr) == -1)) {
                this.map(pAddr, vAddr);
                pAddr += PageAllocator:PAGESIZE;
                vAddr += PageAllocator:PAGESIZE;
                allocated++;
            }
        }
        this.flushTLB();
        return allocated;
        // TODO: handle page info list
    }
    
    [] freePagesAt(int virtualAddress, int count) {
        // TODO: mark pages as free and merge into free page info list
        int pages = count;
        int cur = virtualAddress;
        while (pages-- > 0) {
            this.unmap(cur);
            cur += PageAllocator:PAGESIZE;
        }
    }
    
    [int] newPageTable() {
        this.allocatePagesAt(0xFFBF9000, 1);
        // clear new page table
        Address:setBytes(0xFFBF9000, PageAllocator:PAGESIZE, 0);
        return this.unmap(0xFFBF9000);
    }
    
}
