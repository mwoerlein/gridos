/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386::memory;

use sys::core::Object;
use sys::core::utils::Bitset;
use sys::memory::Address;
use sys::memory::PageAllocator;

class MMU extends Object {
    
    global int PRESENT_BIT := 0x1;
    global int READ_WRITE_BIT := 0x2;
    global int USER_SUPERUSER_BIT := 0x4;
    global int KERNEL_ACCESS_BITS := MMU:PRESENT_BIT;
    global int USER_ACCESS_BITS := MMU:PRESENT_BIT + MMU:READ_WRITE_BIT + MMU:USER_SUPERUSER_BIT;
    
    global int USER_STACK_PAGES := 4;
    global int KERNEL_LOCAL_STACK_PAGES := 4;
    global int KERNEL_SHARED_STACK_PAGES := 16;
    
    global int START_USER_HEAP := 0x00001000;
    global int AFTER_USER_STACKS := 0xF0000000; //MMU:START_KERNEL_LOCAL_HEAP; // compiler segfault with correct constant???
    global int START_KERNEL_LOCAL_HEAP := 0xF0000000;
    global int AFTER_KERNEL_LOCAL_STACKS := 0xF8000000; //MMU:START_KERNEL_SHARED_HEAP; // compiler segfault with correct constant???
    global int START_KERNEL_SHARED_HEAP := 0xF8000000;
    global int AFTER_KERNEL_SHARED_STACK := 0xFF800000;
    
    global int MODULES_MAPPING := 0xFF800000; //MMU:AFTER_KERNEL_SHARED_STACK; // compiler segfault with correct constant???
    
    global int START_KERNEL_PT_INDEX := 0x3C0; //(START_KERNEL_LOCAL_HEAP >> 12)
    global int START_KERNEL_SHARED_PT_INDEX := 0x3E0; //(START_KERNEL_SHARED_HEAP >> 12)
    global int AFTER_KERNEL_SHARED_PT_INDEX := 0x3FF;
    global int AFTER_KERNEL_PT_INDEX := 0x400;
    
    int activeDirectory;
    PhysicalFreePageInfo info;
    
    [] __init() {
        int cr0 = 0;
        __pasm__("movl %cr0, %eax", {}, {"%eax": cr0});
        if (Bitset:has(cr0, 0x80000001)) {
            this.refreshActiveDirectory();
        } else {
            activeDirectory = 0;
        }
        info = Address:cast(0xFFBFB000);
    }
    
    [int] isActive() { return this.activeDirectory != 0; }
    [int] getActiveDirectory() { return this.activeDirectory; }
    [] refreshActiveDirectory() {
        __pasm__("movl %cr3, %eax", {}, {"%eax": this.activeDirectory});
    }

    [] activate(int pageDirectoryPAddr) {
        if (pageDirectoryPAddr == 0) {
            this.rt().err().printCString("invalid page directory to activate");
            this.rt().out().printNewline();
            return;
        }
        __pasm__(<"
             movl %eax, %cr3 
             movl %cr0, %eax
             orl 0x80000001, %eax 
             movl %eax, %cr0
        ">, {"%eax": pageDirectoryPAddr});
        this.activeDirectory = pageDirectoryPAddr;
    }
    
    [] flushTLB() {
        __pasm__(<"
             movl %cr3, %eax 
             movl %eax, %cr3
        ">, {}, {"%eax": null}); 
    }
    
    [] map(int pAddr, int vAddr) {
        int accessBits = MMU:KERNEL_ACCESS_BITS;
        if (Address:compareAddress(vAddr, AFTER_USER_STACKS) < 0) {
            accessBits = MMU:USER_ACCESS_BITS;
        }
        
        int pdIndex = Bitset:rshift(vAddr, 22);
        int ptIndex = Bitset:and(Bitset:rshift(vAddr, 12), 0x3ff);
        int pdEntryAddr = 0xFFFFF000 + 4*pdIndex;
        int ptEntryAddr = 0xFFC00000 + Bitset:lshift(pdIndex, 12) + 4*ptIndex;
        
        int pdEntry = Address:loadAddress(pdEntryAddr);
        if (!Bitset:has(pdEntry, MMU:PRESENT_BIT)) {
            Address:storeAddress(pdEntryAddr, this.newPageTable() + accessBits);
            this.flushTLB();
        }
        Address:storeAddress(ptEntryAddr, Bitset:and(pAddr, 0xfffff000) + accessBits); 
    }
    
    [int] unmap(int vAddr) {
        int pdIndex = Bitset:rshift(vAddr, 22);
        int ptIndex = Bitset:and(Bitset:rshift(vAddr, 12), 0x3ff);
        int pdEntryAddr = 0xFFFFF000 + 4*pdIndex;
        int ptEntryAddr = 0xFFC00000 + Bitset:lshift(pdIndex, 12) + 4*ptIndex;
        
        int pdEntry = Address:loadAddress(pdEntryAddr);
        if (!Bitset:has(pdEntry, MMU:PRESENT_BIT)) {
            return -1;
        }
        int ptEntry = Address:loadAddress(ptEntryAddr);
        if (!Bitset:has(ptEntry, MMU:PRESENT_BIT)) {
            return -1;
        }
        Address:storeAddress(ptEntryAddr, 0); 
        return Bitset:and(ptEntry, 0xfffff000); 
    }
    
    [] mapPages(int pAddr, int vAddr, int pages) {
        int curP = pAddr;
        int curV = vAddr;
        int c = 0;
        while (c++ < pages) {
            this.map(curP, curV);
            curP += PageAllocator:PAGESIZE;
            curV += PageAllocator:PAGESIZE;
        }
    }
    
    [int] unmapPages(int vAddr, int pages) {
        int ret = this.unmap(vAddr);
        int curV = vAddr + PageAllocator:PAGESIZE;
        int c = 1;
        while (c++ < pages) {
            this.unmap(curV);
            curV += PageAllocator:PAGESIZE;
        }
        return ret;
    }
    
    [int] getPPage(int vAddr) {
        int pdIndex = Bitset:rshift(vAddr, 22);
        int ptIndex = Bitset:and(Bitset:rshift(vAddr, 12), 0x3ff);
        int pdEntryAddr = 0xFFFFF000 + 4*pdIndex;
        int ptEntryAddr = 0xFFC00000 + Bitset:lshift(pdIndex, 12) + 4*ptIndex;
        
        int pdEntry = Address:loadAddress(pdEntryAddr);
        if (!Bitset:has(pdEntry, MMU:PRESENT_BIT)) {
            return -1;
        }
        int ptEntry = Address:loadAddress(ptEntryAddr);
        if (!Bitset:has(ptEntry, MMU:PRESENT_BIT)) {
            return -1;
        }
        return Bitset:and(ptEntry, 0xfffff000); 
    }
    
    [int] allocatePagesAt(int virtualAddress, int count) {
        int pages = count;
        int allocated = 0;
        if (info.count >= pages) {
            info.count -= pages;
            int pAddr = Address:offsetAddress(info.self, info.count * PageAllocator:PAGESIZE);
            int vAddr = virtualAddress;
            while (pages-- > 0 && (this.getPPage(vAddr) == -1)) {
                this.map(pAddr, vAddr);
                pAddr += PageAllocator:PAGESIZE;
                vAddr += PageAllocator:PAGESIZE;
                allocated++;
            }
        }
        this.flushTLB();
        return allocated;
        // TODO: handle page info list
    }
    
    [int] allocateStackPagesAt(int virtualAddress, int count, int skip) {
        return this.allocatePagesAt(virtualAddress - (count + skip) * PageAllocator:PAGESIZE, count);
    }
    
    [StackBuilder] allocateStackBuilderAt(int virtualAddress, int count) {
        int vAddr = virtualAddress - count * PageAllocator:PAGESIZE;
        int allocated = this.allocatePagesAt(vAddr, count);
        if (allocated != count) {
            if (allocated > 0) { this.freePagesAt(vAddr, allocated); }
            return null;
        }
        StackBuilder sb = this.rt().createInstance(StackBuilder:CLASSNAME);
        sb.init(vAddr, count, 0);
        return sb;
    }
    
    [] freePagesAt(int virtualAddress, int count) {
        // TODO: mark pages as free and merge into free page info list
        int pages = count;
        int cur = virtualAddress;
        while (pages-- > 0) {
            this.unmap(cur);
            cur += PageAllocator:PAGESIZE;
        }
    }
    
    [int] newPageTable() {
        this.allocatePagesAt(0xFFBF9000, 1);
        // clear new page table
        Address:setBytes(0xFFBF9000, PageAllocator:PAGESIZE, 0);
        return this.unmap(0xFFBF9000);
    }
    
    [int, StackBuilder] newThreadPageDirectoryAndKernelStack(int topOfStack) {
        // allocate thread kernel stack page, new page directory, and page tables for userspace and stack page 
        this.allocatePagesAt(0xFFBF0000, 4);
        int pd = this.getPPage(0xFFBF0000);
        int zeroPt = this.getPPage(0xFFBF1000);
        int stackPt = this.getPPage(0xFFBF2000);
        int stack = this.getPPage(0xFFBF3000);

        int vStackPage = topOfStack - PageAllocator:PAGESIZE;
        int stackPdIndex = Bitset:rshift(vStackPage, 22);
        int stackPtIndex = Bitset:and(Bitset:rshift(vStackPage, 12), 0x3ff);
        
        // setup page tables
        Address:setBytes(0xFFBF1000, PageAllocator:PAGESIZE, 0);
        Address:setBytes(0xFFBF2000, PageAllocator:PAGESIZE, 0);
        // add stack page
        Address:storeAddress(0xFFBF2000 + 4*stackPtIndex, stack + MMU:KERNEL_ACCESS_BITS);
        
        // setup page directory
        // clear user space mapping
        Address:setBytes(0xFFBF0000, 4*MMU:START_KERNEL_SHARED_PT_INDEX, 0);
        // keep kernel space mapping
        Address:copyBytes(
            0xFFFFF000 + 4*MMU:START_KERNEL_SHARED_PT_INDEX,
            0xFFBF0000 + 4*MMU:START_KERNEL_SHARED_PT_INDEX,
            4*(MMU:AFTER_KERNEL_SHARED_PT_INDEX - MMU:START_KERNEL_SHARED_PT_INDEX)
        );
        // add new page tables
        Address:storeAddress(0xFFBF0000 + 4*0x0, zeroPt + MMU:USER_ACCESS_BITS);
        Address:storeAddress(0xFFBF0000 + 4*stackPdIndex, stackPt + MMU:KERNEL_ACCESS_BITS);
        Address:storeAddress(0xFFBF0000 + 4*0x3FF, pd + MMU:KERNEL_ACCESS_BITS);
        
        // unmap page directory and tables
        this.unmap(0xFFBF0000);
        this.unmap(0xFFBF1000);
        this.unmap(0xFFBF2000);
        
        // keep kernel stack mapped and return as StackBuilder to be filled by caller
        StackBuilder sb = this.rt().createInstance(StackBuilder:CLASSNAME);
        sb.init(0xFFBF3000, 1, vStackPage - 0xFFBF3000);
        return [pd, sb];
    }
    
}
