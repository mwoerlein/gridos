/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386::memory;

use sys::core::Object;
use sys::memory::Address;
use sys::memory::MemoryIOStream;
use sys::memory::PageAllocator;
use sys::stream::OStream;

class PhysicalPageManager extends Object {

    PhysicalFreePageInfo freePages;
    [] init(PhysicalFreePageInfo freePages) { this.freePages = freePages; }
    
    [PhysicalFreePageInfo] allocatePhysicalPages(int pages) {
        PhysicalFreePageInfo info = freePages;
        do {
            if (info.count >= pages) {
                info.count -= pages;
                PhysicalFreePageInfo ret = Address:offset(info.self, info.count * PageAllocator:PAGESIZE);
                ret.magic = PhysicalFreePageInfo:MAGIC;
                ret.self = ret.prev = ret.next = ret;
                ret.count = pages;
                return ret;
            }
            info = info.prev;
        } while (!Address:equals(info, freePages));
        return null;
    }
    
    [int] allocateZeroedPage() {
        PhysicalFreePageInfo info = this.allocatePhysicalPages(1);
        if (info.magic != PhysicalFreePageInfo:MAGIC) {
            return -1;
        }
        int addr = Address:from(info.self);
        int i = addr + PageAllocator:PAGESIZE;
        while (i > addr) {
            i -= 4;
            Address:storeAddress(i, 0);
        }
        return addr;
    }
    
    [OStream] dumpToStream(OStream stream) {
        PhysicalFreePageInfo info = freePages;
        do {
            stream.printAddr(info.self).printChar(':').printHex(info.count).printNewline();
            info = info.prev;
        } while (!Address:equals(info, freePages));
        
        return stream;
    }
    
}
