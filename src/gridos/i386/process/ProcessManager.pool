/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386::process;

use gridos::i386::memory::MMU;
use gridos::i386::memory::MMUPageAllocator;
use gridos::i386::memory::StackBuilder;

use gridos::i386::sys::SysCall;
use gridos::i386::sys::Thread as UserThread;

use gridos::module::Module;

use sys::core::String;
use sys::memory::PagedMemoryManager;
use sys::runtime::ClassStorage;
use sys::runtime::DynamicClassStorage;
use sys::runtime::Runtime;
use sys::stream::OStream;

class ProcessManager extends sys::core::Object {

    MMU mmu;
    Scheduler scheduler;
    
    Process first;
    Process last;
    int pidCounter;
    
    [ProcessManager] init(Scheduler scheduler, MMU mmu) {
        this.scheduler = scheduler;
        this.mmu = mmu;
        // setup initial kernel process/thread
        Runtime rt = this.rt();
        Process process = this._newProcess(mmu.getActiveDirectory());
        Thread thread = process.createOwn(Thread:CLASSNAME);
        thread._initStart(process);
        process._initFinish(rt, rt, null);
        thread._initFinish("ignore");
        scheduler.setInitialThread(thread);
        return this;
    }
    
    [Process] createProcess(String taskClassname, OStream out, OStream err) {
        [int pageDirectoryPAddr, StackBuilder sb] = mmu.newThreadPageDirectoryAndKernelStack(MMU:AFTER_KERNEL_LOCAL_STACKS);
        
        Process process := this._newProcess(pageDirectoryPAddr);
        Thread thread := this.setupNewProcess(process, sb, null, out, err, taskClassname.toCString());
        
        scheduler.addReadyThread(thread);
        sb.unmap(mmu);
        sb.destroy();
        return process;
    }
    
    [Process] createProcessFromModule(Module module, OStream out, OStream err) {
        String taskClassname = module.getCStringProperty("meta.runTask");
        if (!taskClassname) { return null; }
        
        [int pageDirectoryPAddr, StackBuilder sb] = mmu.newThreadPageDirectoryAndKernelStack(MMU:AFTER_KERNEL_LOCAL_STACKS);
        
        Process process := this._newProcess(pageDirectoryPAddr);
        Thread thread := this.setupNewProcess(process, sb, module, out, err, taskClassname.toCString());
        
        scheduler.addReadyThread(thread);
        sb.unmap(mmu);
        sb.destroy();
        return process;
    }
    
    [Process] _newProcess(int pageDirectoryPAddr) {
        Process p = this.rt().createInstance(Process:CLASSNAME);
        if (last) {
            p.setNext(first);
            last.setNext(p);
            last = p;
        } else {
            first = last = p.setNext(p);
        }
        return p._initStart(++pidCounter, pageDirectoryPAddr);
    }
    
    [Thread] setupNewProcess(Process process, StackBuilder sb, Module module, OStream out, OStream err, cstring tcn) {
        Thread thread = process.createOwn(Thread:CLASSNAME);
        thread._initStart(process);
        
        { // fake stack frame for __setupProcess
            int basePtr = sb.getTopOfStack();
            sb.pushString(tcn);     // task classname
            sb.pushPtr(thread);     // thread
            sb.pushPtr(err);        // err
            sb.pushPtr(out);        // out
            sb.pushPtr(module);     // module
            sb.pushPtr(process);    // process
            sb.buildMethodCallEntry(this, this.getClass(), 0, basePtr);
        }
        scheduler.setupStackFrameForSwitchTo(sb, this.__getSetupProcessEntry(), thread);
        
        thread.setTopOfStack(sb.getTopOfStack());
        return thread;
    }
    
    [Thread] setupNewThread(Thread thread, StackBuilder sb, cstring tcn) {
        { // fake stack frame for __setupThread
            int basePtr = sb.getTopOfStack();
            sb.pushString(tcn);     // task classname
            sb.pushPtr(thread);     // thread
            sb.buildMethodCallEntry(this, this.getClass(), 0, basePtr);
        }
        scheduler.setupStackFrameForSwitchTo(sb, this.__getSetupThreadEntry(), thread);
        
        thread.setTopOfStack(sb.getTopOfStack());
        return thread;
    }
    
    [int] __getSetupProcessEntry() {
        int entry = 0;
        __pasm__("movl 8(%ebp), %eax; addl _cr_mo_setup_process_entry, %eax", {}, {"%eax": entry});
        return entry;
    }
    
    [] __setupProcess(Process process, Module module, OStream out, OStream err, Thread thread, cstring tcn) {
        __pasm__("_cr_mo_setup_process_entry := (_setup_process_entry - _gridos_i386_process_ProcessManager); _setup_process_entry:");
        this._setupProcess(process, module, out, err, tcn);
        this._setupThread(thread, tcn);
    }

    [int] __getSetupThreadEntry() {
        int entry = 0;
        __pasm__("movl 8(%ebp), %eax; addl _cr_mo_setup_thread_entry, %eax", {}, {"%eax": entry});
        return entry;
    }
    
    [] __setupThread(Thread thread, cstring tcn) {
        __pasm__(<"
            _cr_mo_setup_thread_entry := (_setup_thread_entry - _gridos_i386_process_ProcessManager)
            _setup_thread_entry:
        ">);
        this._setupThread(thread, tcn);
    }
    
    [] _setupProcess(Process process, Module module, OStream out, OStream err, cstring tcn) {
        OStream debug = this.rt().err();
        debug.printCString("setup new process ").printInt(process.getPid());
        if (module) { debug.printCString(" for module '").print(module.getId()).printChar('\''); }
        debug
            .printCString(" via ").print(this)
            .print(out).print(err)
            .printNewline();
        
        Runtime ksRt := process.rt();
        
        // increase kernel stack
        mmu.allocateStackPagesAt(MMU:AFTER_KERNEL_LOCAL_STACKS, MMU:KERNEL_LOCAL_STACK_PAGES-1, 1);
        
        // prepare kernel heap management
        MMUPageAllocator tmpKernelMPA = ksRt.createInstance(MMUPageAllocator:CLASSNAME);
        tmpKernelMPA._init(mmu, MMU:START_KERNEL_LOCAL_HEAP);
        PagedMemoryManager tmpKernelPMM = ksRt.createInstance(PagedMemoryManager:CLASSNAME);
        tmpKernelPMM.setMinimalPageAllocation(1).initFromPageAllocator(tmpKernelMPA.pageAllocator(), 1);
        
        // bootstrap kernel runtime for new process
        // TODO: which class should be used for kernel runtime?
        Runtime kernelRt = ksRt.createInstanceAt(Runtime:CLASSNAME, tmpKernelPMM.allocator());
        {
            // use shared classes and clock
            kernelRt.setClassStorage(ksRt.getClassStorage());
            kernelRt.setClock(ksRt.getClock());
            kernelRt.setOut(out); 
            kernelRt.setErr(err);
            kernelRt.setAllocator(tmpKernelPMM.allocator());
            
            // recreate allocator within kernel local runtime
            MMUPageAllocator kernelMPA = kernelRt.createInstance(MMUPageAllocator:CLASSNAME);
            PagedMemoryManager kernelPMM = kernelRt.createInstance(PagedMemoryManager:CLASSNAME);
            // get top of heap *after* creating instances on heap via temporary page allocator
            kernelMPA._init(mmu, tmpKernelMPA.getTopOfHeap());
            kernelPMM.initFromPagedMemoryManager(kernelMPA.pageAllocator(), tmpKernelPMM);
            kernelPMM.setMinimalPageAllocation(10).initFromPageAllocator(tmpKernelMPA.pageAllocator(), 1);
            kernelRt.setAllocator(kernelPMM.allocator());
        }
        tmpKernelPMM.destroy();
        tmpKernelMPA.destroy();
        
        // prepare user heap management
        MMUPageAllocator userMPA = kernelRt.createInstance(MMUPageAllocator:CLASSNAME);
        userMPA._init(mmu, MMU:START_USER_HEAP);
        PagedMemoryManager tmpUserPMM = kernelRt.createInstance(PagedMemoryManager:CLASSNAME);
        // TODO: adjust user page allocation to increase performance 
        tmpUserPMM.setMinimalPageAllocation(1).initFromPageAllocator(userMPA.pageAllocator(), 1);
        
        // preload classes into user heap 
        DynamicClassStorage tmpUserClassStorage = kernelRt.createInstance(DynamicClassStorage:CLASSNAME);
        {
            int moduleWasUnavailable := module && !module.isAvailable();
            if (moduleWasUnavailable) { module.mapAt(mmu, 0xF7000000); } // where to map temporary?
            
            // use module as primary class source, if given 
            if (module) {
                sys::store::Store store = tmpUserClassStorage.createOwn(sys::store::Store:CLASSNAME);
                store.setContent(module.getIOStream()).setAllocator(tmpUserPMM.allocator());
                tmpUserClassStorage.addLoader(store.classDescriptorLoader());
            }
            // fallback to kernel classes (i.e. for specific runtime setup)  
            {
                sys::runtime::ClassStorageClassDescriptorLoader cscdl = tmpUserClassStorage.createOwn(sys::runtime::ClassStorageClassDescriptorLoader:CLASSNAME);
                cscdl.setClassStorage(kernelRt.getClassStorage()).setAllocator(tmpUserPMM.allocator());
                tmpUserClassStorage.addLoader(cscdl.classDescriptorLoader());
            }
            
            // load required classes 
            {
                tmpUserClassStorage.preloadClassDesc(tcn);
                tmpUserClassStorage.preloadClassDesc(SysCall:CLASSNAME);
                //debug.printCString("loaded classes: ").printInt(tmpUserClassStorage.size()).printNewline();
            }
            
            if (moduleWasUnavailable) { module.unmap(mmu); }
        }
        
        // bootstrap user runtime for new process
        Runtime userRt = SysCall:createUserRuntime(kernelRt, tmpUserPMM, tmpUserClassStorage);
        
        tmpUserClassStorage.destroy();
        tmpUserPMM.destroy();
        
        // setup process        
        process._initFinish(kernelRt, userRt, userMPA.pageAllocator());
    }
    
    [] _setupThread(Thread thread, cstring tcn) {
        this.rt().err()
            .printCString("setup new thread in process ").printInt(thread.getPid())
            .printCString(" for task '").printCString(tcn).printChar('\'')
            .printNewline();
        
        thread._initFinish(tcn);
        
        UserThread userThread = thread.getUserThread();
        int topOfUserStack = 0;
        
        // prepare user thread stack
        {
            StackBuilder sb = mmu.allocateStackBuilderAt(MMU:AFTER_USER_STACKS, MMU:USER_STACK_PAGES); // TODO #30: determine correct stack
            
             // fake stack frame for __setupThread
            int basePtr = sb.getTopOfStack();
            
            sb.buildMethodCallEntry(userThread, userThread.getClass(), 0, basePtr);
            topOfUserStack = sb.getTopOfStack();
            sb.destroy();
        }
        
        // switch to user mode and jump to user entry method and user stack
        __pasm__(
            <"
                cli
                // ensure user segment in all segment registers
                movw 0x23, %ax
                movw %ax, %ds
                movw %ax, %es
                movw %ax, %fs
                movw %ax, %gs
                // %cs and %ss are set by iret
                
                // setup iret stack frame
                pushl 0x23  // data selector (with bottom 2 bits set for ring 3)
                pushl %ecx  // current esp
                pushfl      // eflags
                orl 0x200, (%esp) // set FI-Flag to re-enable interrupts with iret 
                pushl 0x1B  // code selector (with bottom 2 bits set for ring 3)
                pushl %ebx  // instruction address to return to
                
                // setup base pointer
                movl %ecx, %ebp
                iret
            ">,
            {"%ebx": userThread._getUserEntry(), "%ecx": topOfUserStack },
            {"%eax": null }
        );
    }
    
}
