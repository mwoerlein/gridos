/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386::process;

use gridos::i386::memory::MMU;
use gridos::i386::memory::StackBuilder;

class ProcessManager extends sys::core::Object {

    MMU mmu;
    Scheduler scheduler;
    
    Thread first;
    Thread last;
    int pidCounter;
    
    [ProcessManager] init(Scheduler scheduler, MMU mmu) {
        this.scheduler = scheduler;
        this.mmu = mmu;
        Thread t = this._newProcess(mmu.getActiveDirectory())._newThread();
        first = last = t.setNext(t);
        scheduler.setCurrentThread(t);
        return this;
    }
    
    [Process] createProcess(cstring taskClassname) {
        int setup_entry = 0;
        __pasm__("movl 8(%ebp), %eax; addl _cr_mo_setup_entry, %eax", {}, {"%eax": setup_entry});
        
        [int pageDirectoryPAddr, StackBuilder sb] = mmu.newThreadPageDirectoryAndKernelStack(0xF0000000);
        Process process := this._newProcess(pageDirectoryPAddr);
        Thread thread := process._newThread();
        
        { // fake stack frame of called _setup_entry
            int basePtr = sb.getTopOfStack();
            sb.pushString(taskClassname);   // argument
            sb.pushPtr(thread);             // argument
            sb.buildMethodCallEntry(this, this.getClass(), 0, basePtr);
        }
        scheduler.setupStackFrameForSwitchTo(sb, setup_entry, thread);
        
        thread.setTopOfStack(sb.getTopOfStack()).setNext(first);
        last.setNext(thread);
        last = thread;
        sb.unmap(mmu);
        sb.destroy();
        return process;
    }
    
    [] _setup_entry(Thread thread, cstring taskClassname) {
        __pasm__(<"
            _cr_mo_setup_entry := (_setup_entry - _gridos_i386_process_ProcessManager)
            _setup_entry:
        ">);
        this._setupNewThread(thread, taskClassname);
    }
    
    [] _setupNewThread(Thread thread, cstring taskClassname) {
        this.rt().err()
            .printCString("setup new thread in process ").printInt(thread.getPid())
            .printCString(" for class '").printCString(taskClassname).printChar('\'')
            //.printCString(" via ").print(this)
            .printNewline();
        // TODO: setup ProcessRuntime, create and run thread/task (in userland), and cleanup/exit process/thread if task returns 
        this.rt().createAndRunTask(taskClassname);
        while (1) { __pasm__("hlt"); }
    }
    
    [Process] _newProcess(int pageDirectoryPAddr) {
        Process p = this.rt().createInstance(Process:CLASSNAME);
        return p.setPid(++pidCounter).setPageDirectoryPAddr(pageDirectoryPAddr);
    }
    
}
