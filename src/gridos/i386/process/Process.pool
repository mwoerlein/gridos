/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386::process;

use sys::runtime::Process as SysProcess;
use sys::runtime::Thread as SysThread;
use sys::stream::OStream;
use sys::time::Timestamp;

// TODO: split into kernel and user mode process representations
class Process extends SysProcess {

    int pid;
    Timestamp cpuTS;
    int pageDirectoryPAddr;
    Process next;
    OStream out;
    OStream err;

    [Process] init(int pid, int pAddr, OStream out, OStream err) {
        this.pid = pid;
        this.pageDirectoryPAddr = pAddr;
        cpuTS = this.createOwn(Timestamp:CLASSNAME);
        cpuTS.setTime(0, 0);
        this.out = out;
        this.err = err;
        return this; 
    }
    
    [int] getPid() { return this.pid; }

    [int, int] getCPUTime() { [int s, int n] := cpuTS.getTime(); return [s, n]; }
    [] addCPUTime(int sec, int nsec) { cpuTS.addTime(sec, nsec); }
    
    [int] getPageDirectoryPAddr() { return this.pageDirectoryPAddr; }
    
    [OStream] getOut() { return out; }
    [OStream] getErr() { return err; }

    [Process] setNext(Process n) { this.next = n; return this; }
    [Process] getNext() { return this.next; }
    
    [SysThread] startThreadForTask(cstring name) {
        // TODO #30
        return null;
    }
    
    [Thread] _newThread() {
        Thread t = this.createOwn(Thread:CLASSNAME);
        return t.init(this);
    }
    
}
