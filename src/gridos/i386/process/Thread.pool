/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386::process;

use sys::runtime::Process as SysProcess;
use sys::runtime::Thread as SysThread;
use sys::time::Timestamp;

// TODO: split into kernel and user mode thread representations
class Thread extends SysThread {

    Process process;
    Timestamp cpuTS;
    int topOfStack;
    Thread next;
    
    [Thread] init(Process p) {
        this.process = p;
        cpuTS = this.createOwn(Timestamp:CLASSNAME);
        cpuTS.setTime(0, 0);
        return this; 
    }
    
    [SysProcess] getProcess() { return this.process.process(); }
    [Process] getKernelProcess() { return this.process; }
    [int] getPid() { return this.process.getPid(); }
    [int] getPageDirectoryPAddr() { return this.process.getPageDirectoryPAddr(); }
    
    [int, int] getCPUTime() { [int s, int n] := cpuTS.getTime(); return [s, n]; }
    [] addCPUTime(int sec, int nsec) {
        cpuTS.addTime(sec, nsec);
        process.addCPUTime(sec, nsec);
    }
    
    [int] getStatus() {
        // TODO #24
        return SysThread:STATUS_READY;
    }
    [] awaitTermination() {
        // TODO #24
    }
    
    [Thread] setTopOfStack(int tos) { this.topOfStack = tos; return this; }
    [int] getTopOfStack() { return this.topOfStack; }
    
    [Thread] setNext(Thread n) { this.next = n; return this; }
    [Thread] getNext() { return this.next; }
    
}
