/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos;

use sys::core::Boolean;
use sys::core::Character;
use sys::core::Integer;
use sys::core::String;

use sys::stream::FOStream;

class SampleTask extends sys::core::Task {

    // methods
    [int] run() {
        sys::runtime::Runtime rt = this.rt();
        sys::runtime::Thread thread = rt.getCurrentThread();
        
        sys::stream::OStream out = rt.out();
        sys::stream::OStream err = rt.err();
        FOStream fout = rt.cast(FOStream:CLASSNAME, out);
        {
            err.print(this).printNewline();
            err.print(this.getClass()).printNewline();
            err.print(rt).printNewline();
            err.print(thread).printNewline();
        }
        {
            //rt.createAndRunTask(my::simple::B:CLASSNAME);
        }
        {
            String s = rt.createInstance(String:CLASSNAME);
            s.assignCString("run sample task");
            s.printCString(" with some tests");
            out.print(s).printNewline();
            s.destroy();
        }
        {
            Boolean b = rt.createInstance(Boolean:CLASSNAME);
            b.assignBool(1);
            out.print(b).printChar(' ');
            b.flip();
            out.print(b).printNewline();
            b.destroy();
        }
        {
            Character c = rt.createInstance(Character:CLASSNAME);
            c.assignChar('a');
            out.print(c).printChar(' ').printInt(c.compareChar('b')).printNewline();
            c.destroy();
        }
        {
            Integer i = rt.createInstance(Integer:CLASSNAME);
            i.assignInt(-1);
            while (i.compareInt(5) <= 0) {
                out.print(i).printChar(':').printInt(this.fibo(i.getInt())).printNewline();
                i.inc();
            }
            i.destroy();
        }
        if (fout) {
            fout.printSampleBoxDD();
            fout.printSampleBoxSS();
            fout.printSampleBoxSD();
            fout.printSampleBoxDS();
            fout.printSampleBoxSODI();
            fout.printSampleBoxDOSI();
        } else {
            err.printCString("fout not found").printNewline();
        }
        {
            sys::memory::MemoryInfo info1 = rt.getAllocator().allocate(0x1000);
            sys::memory::MemoryInfo info2 = rt.getAllocator().allocate(0x1000);
            sys::memory::MemoryInfo info3 = rt.getAllocator().allocate(0x1000);
            out.printPtr(info1.buf).printNewline();
            out.printPtr(info2.buf).printNewline();
            out.printPtr(info3.buf).printNewline();
            rt.getAllocator().free(info3);
            rt.getAllocator().free(info2);
            rt.getAllocator().free(info1);
        }
        if (rt.hasClock()) {
            sys::time::Clock clock = rt.getClock();
            int i = 3;
            out.print(clock).printNewline();
            while (i-- > 0) {
                clock.sleep(2, 0);
                out.print(clock).printNewline();
            }
            while (true) {
                rt.yield();
                out.print(thread).printNewline();
                clock.sleep(10, 0);
            }
        }
        
        err.printCString("add more implementation");
        out.printNewline();
        return 0;
    }
    
    [int] fibo(int i) {
        if (i <= 0) { return 0; }
        else if (i == 1) { return 1; }
        else { return this.fibo(i-2) + this.fibo(i-1); }
    }
    
}
