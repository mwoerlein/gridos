/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
[pool]
bootstrap = bootstrap
bootstrap2 = gridos::Runtime:bootstrap(int, int)
*/
namespace gridos;

use sys::core::Object;
use sys::core::OStream;
use sys::memory::Allocator;
use sys::memory::MemoryInfo;
use sys::runtime::Class;
use sys::runtime::ClassDescriptor;
use sys::runtime::ClassStorage;
use sys::runtime::Runtime as CoreRuntime;

use gridos::i386::CgaScreen;

class Runtime extends CoreRuntime, Allocator, ClassStorage {
    
    // TODO: remove with syscall
    // SysCall constants
    int SysCall_allocate := 1;
    int SysCall_free := 2;
    int SysCall_find_class := 3;
    int SysCall_print := 4;
    
    // TODO: remove with syscall
    // SysCall print kinds
    int spk_char := 0;
    int spk_int := 1;
    int spk_hex := 2;
    int spk_string := 3;
    
    // variables
    // TODO: remove after real pool implementation exists
    int syscall_runtime;
    int syscall_entry;
    
    // methods
    global [CoreRuntime] bootstrap(int syscall_runtime, int syscall_entry) {
        
        // get class descriptors
        ClassDescriptor cdClass = Class:_getClassDesc();
        if (!cdClass) { return null; } // abort on initialization error
        
        ClassDescriptor cdRuntime = Runtime:_getClassDesc();
        if (!cdRuntime) { return null; } // abort on initialization error

        // allocate spaces
        MemoryInfo icClass = Runtime:_allocate(cdClass.inst_tpl_size, syscall_runtime, syscall_entry);
        if (!icClass) { return null; } // abort on initialization error

        MemoryInfo irt = Runtime:_allocate(cdRuntime.inst_tpl_size, syscall_runtime, syscall_entry);
        if (!irt) { return null; } // abort on initialization error
        
        [Class cClass, Object ocClass] = Runtime:_initTemplate(icClass, cdClass);
        [Runtime rt, Object ort] = Runtime:_initTemplate(irt, cdRuntime);
        rt.initSysCall(syscall_runtime, syscall_entry);
        
        // prepare for further instantiations
        rt.setRt(rt.runtime());
        rt.setAllocator(rt.allocator());
        rt.setClassStorage(rt.classStorage());
        cClass.setRt(rt.runtime());
        cClass.setDesc(cdClass);
        
        // finalize instances
        cClass.__init();
        rt.__init();
        
        // create and init class for current Runtime
        if (!rt._createClass(cdRuntime)) { return null; } // abort on initialization error
        
        return rt.runtime();
    }
    
    [] initSysCall(int syscall_runtime, int syscall_entry) {
        this.syscall_runtime = syscall_runtime;
        this.syscall_entry = syscall_entry;
    }
    
    // TODO #7: move to constructor with (implicit) parent calls
    [] __init() {
    //*/
        RuntimeOStream rs0 = this.createInstance(RuntimeOStream:CLASSNAME);
        this.setOut(rs0.initOStream(this, 0));
        RuntimeOStream rs1 = this.createInstance(RuntimeOStream:CLASSNAME);
        this.setErr(rs1.initOStream(this, 1));
    /*/
        CgaScreen screen = this.createInstance(CgaScreen:CLASSNAME);
        screen.init();
        this.setOut(screen.getFormattedOStream(7));
        this.setErr(screen.getFormattedOStream(12));
    //*/
    }
    
    [ClassDescriptor] getClassDesc(cstring name) {
        ClassDescriptor classDesc = null;
        __pasm__(<"
            pushl 0; pushl %eax; pushl _gridos_Runtime_coi_SysCall_find_class
            pushl %esp; pushl %edi; call %esi
            addl 16, %esp; popl %eax
        ">, {"%eax": name, "%edi": syscall_runtime, "%esi": syscall_entry}, {"%eax": classDesc});
        return classDesc;
    }
    
    [MemoryInfo] allocate(int size) {
        MemoryInfo info = null;
        __pasm__(<"
            pushl 0; pushl %eax; pushl _gridos_Runtime_coi_SysCall_allocate
            pushl %esp; pushl %edi; call %esi
            addl 16, %esp; popl %eax
        ">, {"%eax": size, "%edi": syscall_runtime, "%esi": syscall_entry}, {"%eax": info});
        return info;
    }
    
    [] free(MemoryInfo info) {
        __pasm__(<"
            pushl %eax; pushl 0; pushl _gridos_Runtime_coi_SysCall_free
            pushl %esp; pushl %edi; call %esi
            addl 20, %esp
        ">, {"%eax": info, "%edi": syscall_runtime, "%esi": syscall_entry});
    }
    [MemoryInfo] getInfo(int addr) { return null; }
    [int] getAvailableBytes() { return -1; }
    [OStream] dumpToStream(OStream stream) { return stream.print(this); }
    
    [] printChar(int c, int stream) {
        __pasm__(<"
            pushl %eax; pushl _gridos_Runtime_coi_spk_char; pushl %ebx; pushl _gridos_Runtime_coi_SysCall_print
            pushl %esp; pushl %edi; call %esi
            addl 24, %esp
        ">, {"%eax": c, "%ebx": stream, "%edi": syscall_runtime, "%esi": syscall_entry});
    }
    
    global [ClassDescriptor] _getClassDesc() {
        ClassDescriptor desc = null;
        __pasm__("movl 8(%ebp), %eax", {}, {"%eax": desc});
        return desc;
    }
    
    global [MemoryInfo] _allocate(int size, int syscall_runtime, int syscall_entry) {
        MemoryInfo info = null;
        __pasm__(<"
            pushl 0; pushl %eax; pushl _gridos_Runtime_coi_SysCall_allocate
            pushl %esp; pushl %edi; call %esi
            addl 16, %esp; popl %eax
        ">, {"%eax": size, "%edi": syscall_runtime, "%esi": syscall_entry}, {"%eax": info});
        return info;
    }
    
}
