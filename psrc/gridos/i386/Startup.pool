/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::i386;

use gridos::multiboot2::BootInformation;
use gridos::multiboot2::structs::Context;
use sys::core::OStream;
use sys::runtime::Runtime;
use sys::runtime::RuntimeBuilder;

class Startup extends Runtime, RuntimeBuilder {
    
    // TODO: implement and collect modules 
    int modules;
    
    // methods
    global [] __entry__(int magic, int mbi, int mbh) {
        // TODO: generate automatically via new __entry__ flag for method or via naming convention? 
        __pasm__(<"
_entry_class_desc   := _gridos_i386_Startup
_entry_global_func  := _ede2228d_md___entry__
        ">);
        
        // setup context
        int contextAddr = 0;
        Context context = null;
        __pasm__("subl %eax, %esp", {"%eax": Context:SIZEOF}, {"%esp": contextAddr});
        __pasm__("", {"%eax": contextAddr}, {"%eax": context});
        context.magic = magic;
        context.mbi = mbi;
        context.mbh = mbh;
        
        Runtime _rt = Startup:_bootstrap(Startup:CLASSNAME, contextAddr);
        
        // free context
        __pasm__("addl %eax, %esp", {"%eax": Context:SIZEOF});
        
        if (_rt) {
            Startup rt = _rt.cast(Startup:CLASSNAME, _rt);
            if (rt) {
                rt.initializeKernel();
            }
        }
    }
    
    [Runtime] _buildRuntime(int context) {
        Context c = null;
        __pasm__("", {"%eax": context}, {"%eax": c});
        Runtime bsRt := this.rt();
        CgaScreen bsScreen = bsRt.createInstance(CgaScreen:CLASSNAME);
        bsScreen.init();
        OStream bsOut = bsScreen.getFormattedOStream(15);
        bsRt.setOut(bsOut);
        bsRt.setErr(bsOut);
        
        if (c.magic != BootInformation:BOOTLOADER_MAGIC) {
            bsOut.printCString("Invalid magic number: ").printPtr(c.magic).printNewline();
            return null;
        }
        if (c.mbi % 8) {
            bsOut.printCString("Unaligned mbi: ").printPtr(c.mbi).printNewline();
            return null;
        }
        
        BootInformation bi = bsRt.createInstance(BootInformation:CLASSNAME);
        bi.initInfo(c.mbi, c.mbh);
        bsOut.printCString("loaded via ").printCString(bi.getBootLoader()).printNewline();
        bi.registerMemory();
        bi.registerModules();
        
        return null;
    }
    
    [] initializeKernel() {
        // TODO: create and initialize kernel runtime
        // TODO: run kernel thread and free/destroy startup memory/objects
    }
}
