/*[meta]
mimetype = text/x-pool
author = Marc Woerlein <marc.woerlein@gmx.de>
version = 0.1.0
*/
namespace gridos::multiboot2;

use gridos::multiboot2::structs::HeaderTagAddress;
use gridos::multiboot2::structs::MMapEntry;
use gridos::multiboot2::structs::MultiBootHeader;
use gridos::multiboot2::structs::MultiBootInformation;
use gridos::multiboot2::structs::Tag;
use gridos::multiboot2::structs::TagBasicMemInfo;
use gridos::multiboot2::structs::TagMMap;
use gridos::multiboot2::structs::TagModule;
use gridos::multiboot2::structs::TagString;

use sys::core::Object;
use sys::core::OStream;
use sys::memory::Address;
use sys::memory::MemoryRegistry;

class BootInformation extends Object {
    
    int BOOTLOADER_MAGIC := 0x36d76289;
    
    MultiBootInformation mbi;
    MultiBootHeader mbh;
    
    HeaderTagAddress address;
    TagString commandline;
    TagString bootloader;
    TagBasicMemInfo meminfo;
    TagMMap mmap;
    TagModuleListElement modules;
    
    [] initInfo(int mbi, int mbh) {
        OStream out = this.rt().out();
        this.mbi = Address:cast(mbi);
        this.mbh = Address:cast(mbh);
        this.address = null;
        this.commandline = null;
        this.bootloader = null;
        this.meminfo = null;
        this.mmap = null;
        this.modules = null;
        
        {
            Tag tag = Address:cast(mbi + MultiBootInformation:SIZEOF);
            while (tag.type != Tag:TYPE_END) {
                int type = tag.type;
                if (type == Tag:TYPE_CMDLINE) {
                    this.commandline = Address:convert(tag);
                } else if (type == Tag:TYPE_BOOT_LOADER_NAME) {
                    this.bootloader = Address:convert(tag);
                } else if (type == Tag:TYPE_MODULE) {
                    TagModule module = Address:convert(tag);
                    TagModuleListElement newElem = this.rt().createInstance(TagModuleListElement:CLASSNAME);
                    newElem.setModule(module);
                    newElem.setNext(this.modules);
                    this.modules = newElem;
                } else if (type == Tag:TYPE_BASIC_MEMINFO) {
                    this.meminfo = Address:convert(tag);
                } else if (type == Tag:TYPE_MMAP) {
                    this.mmap = Address:convert(tag);
                }
                tag = Address:offset(tag, ((tag.size + 7) / 8) * 8);
            }
        }
        
        {
            Tag tag = Address:cast(mbh + MultiBootHeader:SIZEOF);
            while (tag.type != Tag:TYPE_END) {
                int type = tag.type % 256;
                if (type == Tag:HEADER_ADDRESS) {
                    this.address = Address:convert(tag);
                }
                tag = Address:offset(tag, ((tag.size + 7) / 8) * 8);
            }
        }
    }
    
    [cstring] getBootLoader() {
        return Address:string(bootloader, TagString:SIZEOF);
    }
    
    [cstring] getCommandLine() {
        return Address:string(commandline, TagString:SIZEOF);
    }
    
    [] registerMemory(MemoryRegistry registry) {
        OStream out = this.rt().out();
        int endAddr = Address:from(mmap) + mmap.size;
        int curAddr = Address:from(mmap) + TagMMap:SIZEOF;
        
        while (curAddr < endAddr) {
            MMapEntry entry = Address:cast(curAddr);
            if (entry.addr_high) {
                // ignore memory > 4GB, 64 bit not yet available
            } else if (entry.type == MMapEntry:TYPE_AVAILABLE) {
                if (entry.len_high || Address:sumOverflow(entry.addr, entry.len)) {
                    // truncate to 4GB bound 
                    registry.registerAvailableMemory(entry.addr, 0xffffffff - entry.addr);
                } else {
                    registry.registerAvailableMemory(entry.addr, entry.len);
                }
            }
            curAddr += mmap.entry_size;
        }
        
        curAddr = Address:from(mmap) + TagMMap:SIZEOF;
        while (curAddr < endAddr) {
            MMapEntry entry = Address:cast(curAddr);
            if (entry.addr_high) {
                // ignore memory > 4GB, 64 bit not yet available
            } else if (entry.type != MMapEntry:TYPE_AVAILABLE) {
                if (entry.len_high || Address:sumOverflow(entry.addr, entry.len)) {
                    // truncate to 4GB bound 
                    registry.registerReservedMemory(entry.addr, 0xffffffff - entry.addr);
                } else {
                    registry.registerReservedMemory(entry.addr, entry.len);
                }
            }
            curAddr += mmap.entry_size;
        }
        
        /* register kernel */
        registry.registerUsedMemory(address.load_addr, address.bss_end_addr - address.load_addr);
        /* register modules */
        TagModuleListElement cur = modules;
        while (cur) {
            TagModule module = cur.getModule();
            registry.registerUsedMemory(module.mod_start, module.mod_end - module.mod_start);
            cur = cur.getNext();
        }
        /* register mbi */
        registry.registerUsedMemory(Address:offsetAddress(mbi, mbi.size), mbi.size);
    }
    
    [] registerModules() {
        OStream out = this.rt().out();
        out.printPtr(address.load_addr).printChar(':').printPtr(address.bss_end_addr).printChar(' ').printCString(this.getCommandLine()).printNewline();
        TagModuleListElement cur = modules;
        while (cur) {
            TagModule module = cur.getModule();
            out.printPtr(module.mod_start).printChar(':').printPtr(module.mod_end).printChar(' ').printCString(Address:string(module, TagModule:SIZEOF)).printNewline();
            cur = cur.getNext();
        }
    }
}
